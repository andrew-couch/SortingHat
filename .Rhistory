filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
count(house, word, sort = TRUE) %>%
bind_tf_idf(word, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 10) %>%
select(house, word, tf_idf) %>%
mutate(type = "tf-idf") %>%
rename("value" = tf_idf)
df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
group_by(house) %>%
count(house, word) %>%
top_n(n, n = 10) %>%
mutate(type = "bow") %>%
rename("value" = n)
rbind(df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
count(house, word, sort = TRUE) %>%
bind_tf_idf(word, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 10) %>%
select(house, word, tf_idf) %>%
mutate(type = "tf-idf") %>%
rename("value" = tf_idf),
df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
group_by(house) %>%
count(house, word) %>%
top_n(n, n = 10) %>%
mutate(type = "bow") %>%
rename("value" = n)) %>%
ggplot(mapping = aes(x = reorder_within(word, value, house),
y = value,
color = house,
fill = house)) +
geom_col() +
scale_x_reordered() +
facet_wrap(~ type + house,
scales = "free", ncol = 2) +
coord_flip()
#sentiment tf-idf
tfidf <-  df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
count(house, word, sort = TRUE) %>%
bind_tf_idf(word, house, n) %>%
group_by(house)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(word1 %in% names$value,
word2 %in% names$value,
word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ")
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(word1 %in% names$value,
word2 %in% names$value,
word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ")
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ")
names
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(word1 %in% names$value) %>%
filter(word2 %in% names$value) %>%
filter(word3 %in% names$value)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3))
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ")
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ")
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ")
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 10)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 10)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 5)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
select(house, trigram, tf_idf)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
select(house, trigram, tf_idf) %>%
sapply(, summary)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
select(house, trigram, tf_idf) %>%
sapply(, summary())
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
select(house, trigram, tf_idf) %>%
sapply(summary())
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
select(house, trigram, tf_idf) %>%
lapply(summary())
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
select(house, tf_idf) %>%
tapply(FUN = summary)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
select(house, tf_idf) %>%
tapply(house, FUN = sumamry)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
select(house, tf_idf) %>%
tapply(house, FUN = summary)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
select(house, tf_idf) %>%
group_by(house) %>%
summarise(mean = mean(tf_idf),
median = median(tf_idf),
min = min(tf_idf),
max = max(tf_idf))
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
select(house, tf_idf) %>%
group_by(house) %>%
top_n(tf_idf, n = 3)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 5)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10) %>%
ggplot(mapping = aes(x = reorder_within(trigram, n, house), y = n, color = house, fill = house)) + geom_col() +
scale_x_reordered() + facet_wrap(~house, scales = "free")
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10) %>%
ggplot(mapping = aes(x = reorder_within(trigram, n, house),
y = n,
color = house,
fill = house)) +
geom_col() +
scale_x_reordered() +
facet_wrap(~house, scales = "free") +
coord_flip()
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10) %>%
mutate(trigram %in% .) %>%
ggplot(mapping = aes(x = reorder_within(trigram, n, house),
y = n,
color = house,
fill = house)) +
geom_col() +
scale_x_reordered() +
facet_wrap(~house, scales = "free") +
coord_flip()
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10) %>%
mutate(duplicate = duplicated(trigram))
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10) %>%
mutate(duplicate = duplicated(trigram)) %>%
filter(duplicate == TRUE)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10) %>%
mutate(duplicate = duplicated(trigram)) %>%
unique(duplicate)
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10) %>%
mutate(duplicate = duplicated(trigram))
df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10) %>%
mutate(duplicate = duplicated(trigram)) %>%
view()
trigramtfidf <- df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10) %>%
trigramtfidf <- df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10)
trigramtfidf <- df %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% names$value) %>%
filter(!word2 %in% names$value) %>%
filter(!word3 %in% names$value) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(house, trigram) %>%
bind_tf_idf(house, trigram, n) %>%
group_by(house) %>%
top_n(n, n = 10)
View(trigramtfidf)
trigramtfidf %>% mutate(trigram %in% trigramtfidf$trigram)
trigramtfidf$trigram %>% duplicated()
trigramtfidf %>% mutate(shared = duplicated(trigramtfidf$trigram))
trigramtfidf %>% duplicated()
trigramtfidf %>% duplicated() %>% cbind(trigramtfidf)
trigramtfidf %>% duplicated() %>% as_tibble() %>% cbind(trigramtfidf)
trigramtfidf %>% duplicated() %>% as.data.frame() %>% cbind(trigramtfidf)
trigramtfidf %>% duplicated() %>% as.data.frame() %>% cbind(trigramtfidf)
df %>%
filter(house != "No Entry") %>%
inner_join( df %>%
select(name) %>%
count(name) %>%
top_n(n, n = 10) %>%
select(name), by = ("name" = "name")) %>%
get_sentences() %>%
unnest_tokens(word, `text`) %>%
anti_join(stop_words) %>%
inner_join(get_sentiments(lexicon = "bing")) %>%
select(name, word, sentiment) %>%
group_by(name, word, sentiment) %>%
count(sentiment) %>%
group_by(name, sentiment) %>%
top_n(n, n = 5) %>%
arrange(name, sentiment, -n) %>%
ungroup() %>%
mutate(n = if_else(sentiment == "positive", n,-n)) %>%
ggplot(mapping = aes(x = reorder_within(word, n, name),
y = n,
color = sentiment,
fill = sentiment)) +
geom_col() +
scale_x_reordered() +
facet_wrap(~name, scales = "free") +
coord_flip() +
theme_economist()
