unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "key", value = "character")
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "key", value = "character", -key)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ")
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(-key)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = key, value = "word")
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = key, value = "word", - key)
gather(key = key, value = "word", -key_
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = key, value = "word", -key)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
count(key) %>% filter(n != 1)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key"))
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-bigram)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-bigram, -key)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "character", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-bigram, -key)
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-bigram, -key)
sharedText %>%
count(key) %>%
filter(n != 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram) %>%
mutate(key = paste(book,element_id, sentence_id,sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) %>%
unique() %>% select(word2, key) %>%
inner_join(sharedText, by = ("key" = "key"))
sharedText %>%
count(key) %>%
filter(n != 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram) %>%
mutate(key = paste(book,element_id, sentence_id,sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) %>%
unique() %>% select(word2, key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram)
rbind(sharedText %>%
count(key) %>%
filter(n != 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram) %>%
mutate(key = paste(book,element_id, sentence_id,sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) %>%
unique() %>% select(word2, key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram),
sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-bigram, -key))
#labels sentences that contain 2 names and dialogue verbs
#chooses verb dialogue over dialogue verb (said harry over harry said)
duplicateSharedText <- sharedText %>%
count(key) %>%
filter(n != 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram) %>%
mutate(key = paste(book,element_id, sentence_id,sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) %>%
unique() %>% select(word2, key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram)
#labels dialogue that does not have duplicate dialoge verbs or characters
#finds name matching with any bigram
uniqueSharedText <- sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-bigram, -key)
colnames(duplicateSharedText)
colnames(duplicateSharedText) <- c("character", "book","element_id","sentence_id","text")
colnames(uniqueSharedText) <- c("character", "book","element_id","sentence_id","text")
rbind(duplicateSharedText, uniqueSharedText)
rbind(duplicateSharedText, uniqueSharedText) %>% nrow()
rbind(duplicateSharedText, uniqueSharedText) %>% unique() %>% nrow()
bookText <- rbind(duplicateSharedText, uniqueSharedText) %>% unique()
bookText %>% arrange(book, element_id, sentence_id)
bookText <- rbind(duplicateSharedText, uniqueSharedText) %>%
unique() %>%
arrange(book, element_id, sentence_id)
sharedText %>%
get_sentences() %>%
unnest_tokens(word, `text`) %>%
select(book, element_id, sentence_id, word) %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")) %>%
filter(word %in% nameList$value) %>%
count(key, word) %>%
select(key, word) %>%
inner_join(sharedText %>%
get_sentences() %>%
unnest_tokens(word, `text`) %>%
select(book, element_id, sentence_id, word) %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")),
by = c("key" = "key")) %>%
select(-word.y, -key) %>%
unique() %>%
arrange(book, element_id, sentence_id)
write.csv(bookText, "booktext.csv", row.names = FALSE)
sentences <- df %>%
get_sentences() %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter((word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) | (word1 %in% dialogueVerbs$dialogueVerbs & word2 %in%    nameList$value)) %>%
select(-word1, -word2) %>%
unique() %>%
arrange(book, element_id, sentence_id) %>%
inner_join(df %>% get_sentences(),
by = c("book" = "book", "element_id" = "element_id", "sentence_id" = "sentence_id"))
sentences <- df %>%
get_sentences() %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter((word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) | (word1 %in% dialogueVerbs$dialogueVerbs & word2 %in%    nameList$value)) %>%
select(-word1, -word2) %>%
unique() %>%
arrange(book, element_id, sentence_id) %>%
inner_join(df %>% get_sentences(),
by = c("book" = "book", "element_id" = "element_id", "sentence_id" = "sentence_id"))
sharedText <- inner_join(df %>%
get_sentences() %>%
filter(str_detect(text, '\\"') == TRUE) %>%
select(book, element_id, sentence_id),
sentences, by = c("book" = "book", "element_id" = "element_id","sentence_id" = "sentence_id"))
#finds sentences with bigram of character verb that also contains quotes
sharedText <- inner_join(df %>%
get_sentences() %>%
filter(str_detect(text, '\\"') == TRUE) %>%
select(book, element_id, sentence_id),
sentences, by = c("book" = "book", "element_id" = "element_id","sentence_id" = "sentence_id")) %>%
arrange(book, element_id, sentence_id)
sharedText <- sharedText %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% nameList$value & word2 %in% dialogueVerbs$dialogueVerbs |
word2 %in% nameList$value & word1 %in% dialogueVerbs$dialogueVerbs) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(key,bigram) %>%
inner_join(sharedText %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")) ,
by = c("key" = "key")) %>%
select(-n) %>%
arrange(book, element_id, sentence_id)
duplicateSharedText <- sharedText %>%
count(key) %>%
filter(n != 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram) %>%
mutate(key = paste(book,element_id, sentence_id,sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) %>%
unique() %>% select(word2, key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram)
uniqueSharedText <- sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-bigram, -key)
colnames(duplicateSharedText) <- c("character", "book","element_id","sentence_id","text")
colnames(uniqueSharedText) <- c("character", "book","element_id","sentence_id","text")
bookText <- rbind(duplicateSharedText, uniqueSharedText) %>%
unique() %>%
arrange(book, element_id, sentence_id)
sentences <- df %>%
get_sentences() %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter((word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) | (word1 %in% dialogueVerbs$dialogueVerbs & word2 %in%    nameList$value)) %>%
select(-word1, -word2) %>%
unique() %>%
arrange(book, element_id, sentence_id) %>%
inner_join(df %>% get_sentences(),
by = c("book" = "book", "element_id" = "element_id", "sentence_id" = "sentence_id"))
#finds sentences with bigram of character verb that also contains quotes
sharedText <- inner_join(df %>%
get_sentences() %>%
filter(str_detect(text, '\\"') == TRUE) %>%
select(book, element_id, sentence_id),
sentences, by = c("book" = "book", "element_id" = "element_id","sentence_id" = "sentence_id")) %>%
arrange(book, element_id, sentence_id)
#adds bigram features
sharedText <- sharedText %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% nameList$value & word2 %in% dialogueVerbs$dialogueVerbs |
word2 %in% nameList$value & word1 %in% dialogueVerbs$dialogueVerbs) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
inner_join(sharedText %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")) ,
by = c("key" = "key")) %>%
arrange(book, element_id, sentence_id)
#labels sentences that contain 2 names and dialogue verbs
#chooses verb dialogue over dialogue verb (said harry over harry said)
duplicateSharedText <- sharedText %>%
count(key) %>%
filter(n != 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram) %>%
mutate(key = paste(book,element_id, sentence_id,sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) %>%
unique() %>% select(word2, key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram)
#labels dialogue that does not have duplicate dialoge verbs or characters
#finds name matching with any bigram
uniqueSharedText <- sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-bigram, -key)
colnames(duplicateSharedText) <- c("character", "book","element_id","sentence_id","text")
colnames(uniqueSharedText) <- c("character", "book","element_id","sentence_id","text")
bookText <- rbind(duplicateSharedText, uniqueSharedText) %>%
unique() %>%
arrange(book, element_id, sentence_id)
sentences <- df %>%
get_sentences() %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter((word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) | (word1 %in% dialogueVerbs$dialogueVerbs & word2 %in%    nameList$value)) %>%
select(-word1, -word2) %>%
unique() %>%
arrange(book, element_id, sentence_id) %>%
inner_join(df %>% get_sentences(),
by = c("book" = "book", "element_id" = "element_id", "sentence_id" = "sentence_id"))
#finds sentences with bigram of character verb that also contains quotes
sharedText <- inner_join(df %>%
get_sentences() %>%
filter(str_detect(text, '\\"') == TRUE) %>%
select(book, element_id, sentence_id),
sentences, by = c("book" = "book", "element_id" = "element_id","sentence_id" = "sentence_id")) %>%
arrange(book, element_id, sentence_id)
#adds bigram features and
sharedText <- sharedText %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% nameList$value & word2 %in% dialogueVerbs$dialogueVerbs |
word2 %in% nameList$value & word1 %in% dialogueVerbs$dialogueVerbs) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(key,bigram) %>%
inner_join(sharedText %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")) ,
by = c("key" = "key")) %>%
select(-n) %>%
arrange(book, element_id, sentence_id)
#labels sentences that contain 2 names and dialogue verbs
#chooses verb dialogue over dialogue verb (said harry over harry said)
duplicateSharedText <- sharedText %>%
count(key) %>%
filter(n != 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram) %>%
mutate(key = paste(book,element_id, sentence_id,sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) %>%
unique() %>% select(word2, key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-key, -bigram)
#labels dialogue that does not have duplicate dialoge verbs or characters
#finds name matching with any bigram
uniqueSharedText <- sharedText %>%
count(key) %>%
filter(n == 1) %>%
select(key) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(key, bigram) %>%
unnest_tokens(bigram, `bigram`, token = "ngrams", n =2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
gather(key = "bigram", value = "word", -key) %>%
select(-bigram) %>%
filter(word %in% nameList$value) %>%
inner_join(sharedText, by = ("key" = "key")) %>%
select(-bigram, -key)
colnames(duplicateSharedText) <- c("character", "book","element_id","sentence_id","text")
colnames(uniqueSharedText) <- c("character", "book","element_id","sentence_id","text")
bookText <- rbind(duplicateSharedText, uniqueSharedText) %>%
unique() %>%
arrange(book, element_id, sentence_id)
sentences <- df %>%
get_sentences() %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter((word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) | (word1 %in% dialogueVerbs$dialogueVerbs & word2 %in%    nameList$value)) %>%
select(-word1, -word2) %>%
unique() %>%
arrange(book, element_id, sentence_id) %>%
inner_join(df %>% get_sentences(),
by = c("book" = "book", "element_id" = "element_id", "sentence_id" = "sentence_id"))
#finds sentences with bigram of character verb that also contains quotes
sharedText <- inner_join(df %>%
get_sentences() %>%
filter(str_detect(text, '\\"') == TRUE) %>%
select(book, element_id, sentence_id),
sentences, by = c("book" = "book", "element_id" = "element_id","sentence_id" = "sentence_id")) %>%
arrange(book, element_id, sentence_id)
#adds bigram features
sharedText <- sharedText %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")) %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% nameList$value & word2 %in% dialogueVerbs$dialogueVerbs |
word2 %in% nameList$value & word1 %in% dialogueVerbs$dialogueVerbs) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(key,bigram) %>%
inner_join(sharedText %>%
mutate(key = paste(book, element_id, sentence_id, sep = "")) ,
by = c("key" = "key")) %>%
select(-n) %>%
arrange(book, element_id, sentence_id)
View(sharedText)
