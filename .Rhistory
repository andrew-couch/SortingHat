select(-`Dialgoue`)
df_bow <- df %>%
inner_join(bowFeatures, by = "House") %>%   # join data sets
select(-`Dialogue`)
View(df_bow)
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(CHaracter, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(Character, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)               # replace NAs with 0
df_bow <- df %>%
inner_join(bowFeatures, by = "Character") %>%   # join data sets
select(-`Dialogue`)
View(bowFeatures)
df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
head()
View(bowFeatures)
ngram_list <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(
!word1 %in% stop_words$word,                 # remove stopwords from both words in bi-gram
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),   # removes any remaining single letter words
!str_detect(word1, pattern = "\\b(.)\\b")
) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
filter(n >= 10) %>% # filter for bi-grams used 10 or more times
pull(bigram)
ngram_features <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
filter(bigram %in% ngram_list) %>%    # filter for only bi-grams in the ngram_list
count(Chracter, bigram) %>%                 # count bi-gram useage by customer ID
spread(bigram, n) %>%                 # convert to wide format
map_df(replace_na, 0)
ngram_features <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
filter(bigram %in% ngram_list) %>%    # filter for only bi-grams in the ngram_list
count(Character, bigram) %>%                 # count bi-gram useage by customer ID
spread(bigram, n) %>%                 # convert to wide format
map_df(replace_na, 0)
View(ngram_features)
ngram_list <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(
!word1 %in% stop_words$word,                 # remove stopwords from both words in bi-gram
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),   # removes any remaining single letter words
!str_detect(word1, pattern = "\\b(.)\\b")
) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
filter(n >1) %>% # filter for bi-grams used 10 or more times
pull(bigram)
ngram_features <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
filter(bigram %in% ngram_list) %>%    # filter for only bi-grams in the ngram_list
count(Character, bigram) %>%                 # count bi-gram useage by customer ID
spread(bigram, n) %>%                 # convert to wide format
map_df(replace_na, 0)
View(ngram_features)
df %>% inner_join(bowFeatures, Character)
df %>% inner_join(bowFeatures, by = Character)
df %>% inner_join(bowFeatures, by = "Character")
df %>% inner_join(bowFeatures, by = "Character") %>% inner_join(ngram_features, by = "Character")
df %>% inner_join(bowFeatures, by = "Character") %>% inner_join(ngram_features, by = "Character") %>% ncol()
View(df_bow)
View(ngram_features)
View(df_bow)
View(bowFeatures)
View(df_bow)
inner_join(df_bow, ngram_features, by = "Character")
inner_join(df_bow, ngram_features, by = "Character") %>% ncol()
cleanedDf <- inner_join(df_bow, ngram_features, by = "Character") %>% ncol()
cleanDf <- as.data.frame(CleanDf)
cleanDf <- as.data.frame(cleanDf)
cleanedDf <- as.data.frame(cleanedDf)
View(cleanedDf)
cleanedDf <- inner_join(df_bow, ngram_features, by = "Character")
cleanedDf <- as.data.frame(cleanedDf)
cleanedDf <- inner_join(df_bow, ngram_features, by = "Character")
View(cleanedDf)
View(bowFeatures)
cleanedDf <- inner_join(bowFeatures, ngram_features, by = "Character")
View(cleanedDf)
cleanedDf %>% inner_join(df %>% select(House, Character), by = "Character")
inner_join(df %>% select(House, Character), cleanedDf, by = "Character")
inner_join(df %>% select(House, Character), cleanedDf, by = "Character") %>% view()
cleanedDf %>% inner_join(df %>% select(House, Character), by = "Character")
cleanedDf %>% left_join(df %>% select(House, Character), by = "Character")
cleanedDf %>% right_join(df %>% select(House, Character), by = "Character")
cleanedDf %>% inner_join(df %>% select(House, Character) %>% unique(), by = "Character")
cleanedDf <- cleanedDf %>% inner_join(df %>% select(House, Character) %>% unique(), by = "Character")
View(cleanedDf)
cleanedDf <- inner_join(df %>% select(House, Character) %>% unique(), cleanedDf, by = "Character")
View(cleanedDf)
cleanedDf <- inner_join(bowFeatures, ngram_features, by = "Character")
cleanedDf <- inner_join(df %>% select(House, Character) %>% unique(), cleanedDf, by = "Character")
View(cleanedDf)
View(cleanedDf)
View(cleanedDf)
View(df_bow)
saveRDS(cleanedDf, file = "HarryPotter.rds")
test <- readRDS("HarryPotter.rds")
library(tidyverse)
library(caret)
df <- readRDS("HarryPotter.rds")
df <- df %>% select(-Character)
trainIndex <- createDataPartition(df$House~., p = .8, list = FALSE)
trainIndex <- createDataPartition(df$House~., p = .8, list = FALSE)
View(df)
trainIndex <- createDataPartition(df$House~., p = .8, list = TRUE)
trainIndex <- createDataPartition(df$House~., p = .8, list = FALSE)
is.na(df)
is.na(df) %>% filter("TRUE") %>% count()
df$House <- as.factor(df$House)
trainIndex <- createDataPartition(df$House~., p = .8, list = FALSE)
library(caret)
trainIndex <- caret::createDataPartition(df$House~., p = .8, list = FALSE)
caret::createDataPartition(df$House~., p = .8 list = FALSE)
caret::createDataPartition(df$House~., p = .8, list = FALSE)
summary(df)
df$House <- as.factor(df$House)
df <- df %>% select(-Character)
df <- readRDS("HarryPotter.rds")
df <- df %>% select(-Character)
createDataPartition(df[,1]~., p = .8, list = FALSE)
type(df)
class(df)
class(df[,2:ncol(df)]
class(df[,2:ncol(df)]
class(df[,2:ncol(df)]
class(df$House)
class(df$House)
df$House <- as.character(df$House)
createDataPartition(df[,1]~., p = .8, list = FALSE)
df <- readRDS("HarryPotter.rds")
df <- as.data.frame(df)
df <- df %>% select(-Character)
trainIndex <- createDataPartition(df$House, p = .8, list = FALSE)
trainData <- df[trainIndex,]
testData <- df[-trainIndex,]
nueralNetwork <- train(df$House~., data = trainData, method = "nnet")
nueralNetwork <- train(df$House~., data = trainData, method = "knn")
nueralNetwork <- train(df$House~., data = trainData, method = "knn", na.action = na.pass)
nueralNetwork <- train(House~., data = trainData, method = "knn", na.action = na.pass)
nueralNetwork
nueralNetwork <- train(House~., data = trainData, method = "knn")
nueralNetwork
nueralNetwork <- train(House~., data = trainData, method = "nnet")
nueralNetwork
library(tidyverse)
library(caret)
df <- readRDS("HarryPotter.rds")
df <- df %>% select(-Character)
trainIndex <- createDataPartition(df$House, p = .8, list = FALSE)
trainData <- df[trainIndex,]
testData <- df[-trainIndex,]
rfModel <- train(House~., data = trainData, method = "rf")
rfModel
rfModel <- train(House~.,
data = trainData,
method = "rf",
preProcess(trainData, method = "pca"),
trControl = trainControl(method = "repeatedcv", number = 10 , repeats = 10,
sampling = "up"))
rfModel <- train(House~.,
data = trainData,
method = "rf",
trControl = trainControl(method = "repeatedcv", number = 10 , repeats = 10,
sampling = "up"))
rfModel
neuralNetworkModel <- train(House~.,
data = trainData,
method = "nnet",
trControl = trainControl(method = "repeatedcv", number = 10 , repeats = 10,
sampling = "up"))
neuralNetworkModel
neuralNetworkModelPCA <-train(House~.,
data = trainData,
method = "pcaNNet",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 10,
sampling = "up"))
neuralNetworkModelPCA
neuralNetworkGradientBoost <- train(House~.,
data = trainData,
method = "mlpSGD",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 10,
sampling = "up"))
neuralNetworkGradientBoost <- train(House~.,
data = trainData,
method = "mlpSGD",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 10,
sampling = "up"))
install.packages("FCNN4R")
neuralNetworkMultiPerceptron <- train(House~.,
data = trainData,
method = "mlpWeightDecay",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 10,
sampling = "up"))
neuralNetworkMultiPerceptron
deepBoostModel <- train(House~.,
data = trainData,
method = "deepboost",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 10,
sampling = "up"))
Sys.time()
deepBoostModel <- train(House~.,
data = trainData,
method = "deepboost",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 10,
sampling = "up"))
Sys.time()
xgboostModel <- train(House~.,
data = trainData,
method = "xgbTree",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 10,
sampling = "up"))
xgboostModel
deepBoostModel <- train(House~.,
data = trainData,
method = "deepboost",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 10,
sampling = "up"))
comparison <- resamples(baselineNeuralNet = neuralNetworkModel,
PCANeuranNet = neuralNetworkModelPCA,
perceptronNeutralNetwork = neuralNetworkMultiPerceptron,
randomForest = rfModel,
XGBoost = xgboostModel)
comparison <- resamples(baselineNeuralNet = neuralNetworkModel,
PCANeuranNet = neuralNetworkModelPCA,
perceptronNeutralNetwork = neuralNetworkMultiPerceptron,
randomForest = rfModel,
XGBoost = xgboostModel)
comparison <- resamples(baselineNeuralNet = neuralNetworkModel,
PCANeuranNet = neuralNetworkModelPCA,
perceptronNeutralNetwork = neuralNetworkMultiPerceptron,
randomForest = rfModel,
XGBoost = xgboostModel)
neuralNetworkModel
neuralNetworkModelPCA
neuralNetworkMultiPerceptron
rfModel
xgboostModel
comparison <- resamples(PCA = neuralNetworkModelPCA,
Perceptron = neuralNetworkMultiPerceptron,
RandomForest = rfModel,
XGBoost = xgboostModel)
comparison <- resamples(list(baselineNeuralNet = neuralNetworkModel,
PCANeuranNet = neuralNetworkModelPCA,
perceptronNeutralNetwork = neuralNetworkMultiPerceptron,
randomForest = rfModel,
XGBoost = xgboostModel))
bwplot(comparison)
dotplot(comparison)
summary(comparison)
library(tidyverse)
library(zoo)
df <- read.csv("CleaningProcess.csv", header = FALSE)
df <- separate(df, col = V1, into = c("left","right"), sep = "\\:", fill = "left")
df[df == ""] <- NA
#Stores lines where dialogue is on the same line as character
DialgoueSameLine <- df[complete.cases(df),]
RestOfDialogue <- df[!complete.cases(df),]
RestOfDialogue$left <-  na.locf(RestOfDialogue$left)
RestOfDialogue <-  RestOfDialogue %>% na.omit()
cleanedDf <- rbind(RestOfDialogue, DialgoueSameLine)
write.csv(cleanedDf, "HarryPotterAddition.csv", row.names = FALSE)
df <- read.csv("CleaningProcess.csv", header = FALSE)
library(tidyverse)
library(zoo)
df <- read.csv("CleaningProcess.csv", header = FALSE)
df <- separate(df, col = V1, into = c("left","right"), sep = "\\:", fill = "left")
df[df == ""] <- NA
#Stores lines where dialogue is on the same line as character
DialgoueSameLine <- df[complete.cases(df),]
RestOfDialogue <- df[!complete.cases(df),]
View(RestOfDialogue)
RestOfDialogue$left <-  na.locf(RestOfDialogue$left)
View(RestOfDialogue)
library(text2vec)
library(tidyverse)
library(tidytext)
harrypotter <- read.csv("HarryPotter.csv")
harrypotter$Dialogue <- harrypotter$Dialogue %>% as.character()
harrypotter %>%
select(Dialogue) %>%
unnest_tokens(word, "Dialogue") %>%
anti_join(stop_words) %>%
filter(!str_detect(word, pattern = "[[:digit:]]"),
!str_detect(word, pattern = "[[:punct:]]"),
!str_detect(word, pattern = "(.)\\1{2,}"),
!str_detect(word, pattern = "\\b(.)\\b")) %>%
count(word, sort = TRUE) %>%
filter(n > 1) %>%
ggplot(mapping = aes(n)) + geom_histogram() + scale_x_log10()
wordList <- harrypotter %>%
select(Dialogue) %>%
unnest_tokens(word, "Dialogue") %>%
anti_join(stop_words) %>%
filter(!str_detect(word, pattern = "[[:digit:]]"),
!str_detect(word, pattern = "[[:punct:]]"),
!str_detect(word, pattern = "(.)\\1{2,}"),
!str_detect(word, pattern = "\\b(.)\\b")) %>%
count(word, sort = TRUE) %>%
filter(n > 1) %>%
pull(word)
bagofwordsFeatures <- harrypotter %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% wordList) %>%
count(Character, word) %>%
spread(word, n) %>%
map_df(replace_na, 0)
bigramList <- harrypotter %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
filter(n >1) %>%
pull(bigram)
bigramFeatures <- harrypotter %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
filter(bigram %in% bigramList) %>%
count(Character, bigram) %>%
spread(bigram, n) %>%
map_df(replace_na, 0)
bigramFeatures <- harrypotter %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
filter(bigram %in% bigramList) %>%
count(Character, bigram) %>%
spread(bigram, n) %>%
map_df(replace_na, 0)
harrypotter <- read.csv("HarryPotter.csv")
harrypotter$Dialogue <- harrypotter$Dialogue %>% as.character()
View(harrypotter)
harrypotter %>%
select(Dialogue) %>%
unnest_tokens(word, "Dialogue") %>%
anti_join(stop_words) %>%
filter(!str_detect(word, pattern = "[[:digit:]]"),
!str_detect(word, pattern = "[[:punct:]]"),
!str_detect(word, pattern = "(.)\\1{2,}"),
!str_detect(word, pattern = "\\b(.)\\b")) %>%
count(word, sort = TRUE) %>%
filter(n > 1) %>%
ggplot(mapping = aes(n)) + geom_histogram() + scale_x_log10()
library(text2vec)
library(tidyverse)
library(tidytext)
harrypotter <- read.csv("HarryPotter.csv")
harrypotter$Dialogue <- harrypotter$Dialogue %>% as.character()
harrypotter %>%
select(Dialogue) %>%
unnest_tokens(word, "Dialogue") %>%
anti_join(stop_words) %>%
filter(!str_detect(word, pattern = "[[:digit:]]"),
!str_detect(word, pattern = "[[:punct:]]"),
!str_detect(word, pattern = "(.)\\1{2,}"),
!str_detect(word, pattern = "\\b(.)\\b")) %>%
count(word, sort = TRUE) %>%
filter(n > 1) %>%
ggplot(mapping = aes(n)) + geom_histogram() + scale_x_log10()
wordList <- harrypotter %>%
select(Dialogue) %>%
unnest_tokens(word, "Dialogue") %>%
anti_join(stop_words) %>%
filter(!str_detect(word, pattern = "[[:digit:]]"),
!str_detect(word, pattern = "[[:punct:]]"),
!str_detect(word, pattern = "(.)\\1{2,}"),
!str_detect(word, pattern = "\\b(.)\\b")) %>%
count(word, sort = TRUE) %>%
filter(n > 1) %>%
pull(word)
bagofwordsFeatures <- harrypotter %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% wordList) %>%
count(Obs, word) %>%
spread(word, n) %>%
map_df(replace_na, 0)
bigramList <- harrypotter %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
filter(n >1) %>%
pull(bigram)
bigramFeatures <- harrypotter %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
filter(bigram %in% bigramList) %>%
count(Obs, bigram) %>%
spread(bigram, n) %>%
map_df(replace_na, 0)
View(bagofwordsFeatures)
bigramFeatures[1:5,1:4]
harrypotter %>%
unnest_tokens( `Dialogue`, token = "ngrams", n = 3) %>%
separate(bigram, c("word1", "word2", "word3"), sep = " ")
harrypotter %>%
unnest_tokens( `Dialogue`, token = "ngrams", n = 3)
harrypotter %>%
unnest_tokens(trigram, `Dialogue`, token = "ngrams", n = 3)
harrypotter %>%
unnest_tokens(trigram, `Dialogue`, token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!word2 %in% stop_words$word,
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "\\b(.)\\b"),
!word3 %in% stop_words$word,
!str_detect(word3, pattern = "[[:digit:]]"),
!str_detect(word3, pattern = "[[:punct:]]"),
!str_detect(word3, pattern = "(.)\\1{2,}"),
!str_detect(word3, pattern = "\\b(.)\\b")) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(trigram) %>%
filter(n > 1) %>%
pull(trigram)
trigramList <- harrypotter %>%
unnest_tokens(trigram, `Dialogue`, token = "ngrams", n = 3) %>%
separate(trigram, c("word1","word2","word3"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!word2 %in% stop_words$word,
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "\\b(.)\\b"),
!word3 %in% stop_words$word,
!str_detect(word3, pattern = "[[:digit:]]"),
!str_detect(word3, pattern = "[[:punct:]]"),
!str_detect(word3, pattern = "(.)\\1{2,}"),
!str_detect(word3, pattern = "\\b(.)\\b")) %>%
unite("trigram", c(word1, word2, word3), sep = " ") %>%
count(trigram) %>%
filter(n > 1) %>%
pull(trigram)
harrypotter %>%
unnest(trigram, `Dialogue`, token = "ngrams", n = 3) %>%
filter(trigram %in% trigramList) %>%
count(Obs, trigram) %>%
spread(trigram, n) %>%
map_df(replace_na,0)
harrypotter %>%
unnest_tokens(trigram, `Dialogue`, token = "ngrams", n = 3) %>%
filter(trigram %in% trigramList) %>%
count(Obs, trigram) %>%
spread(trigram, n) %>%
map_df(replace_na,0)
trigramFeatures <- harrypotter %>%
unnest_tokens(trigram, `Dialogue`, token = "ngrams", n = 3) %>%
filter(trigram %in% trigramList) %>%
count(Obs, trigram) %>%
spread(trigram, n) %>%
map_df(replace_na,0)
library(sentimentr)
harrypotter$Dialogue %>% sentiment()
harrypotter$Dialogue %>% head() %>% sentiment()
