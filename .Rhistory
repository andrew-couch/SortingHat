!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% nameList$value,
!word2 %in% nameList$value) %>%
unite("bigram", c(word1, word2), sep = " ") count(bigram) %>%
filter(n > 2) %>%
arrange(house, -n)
View(df)
#Bigram feature
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% nameList$value,
!word2 %in% nameList$value) %>%
unite("bigram", c(word1, word2), sep = " ") count(bigram) %>%
filter(n > 2) %>%
arrange(house, -n)
#Bigram feature
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% nameList$value,
!word2 %in% nameList$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram)
#Bigram feature
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
#Bigram feature
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram)
#Bigram feature
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ")
#Bigram feature
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(house, bigram)
#Bigram feature
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(house, bigram) %>%
filter(n > 2)
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
count(house, word, sort = TRUE) %>%
bind_tf_idf(bigram, house, n)
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
count(house, bigram, sort = TRUE) %>%
bind_tf_idf(bigram, house, n)
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
count(house, bigram, sort = TRUE) %>%
bind_tf_idf(bigram, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 100)
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% nameList$value,
!word2 %in% nameList$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(house, bigram, sort = TRUE) %>%
bind_tf_idf(bigram, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 100)
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(house, bigram, sort = TRUE) %>%
bind_tf_idf(bigram, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 100)
df %>%
select(text) %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% nameList$value,
!word2 %in% nameList$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
filter(n > 2) %>%
df %>%
select(text) %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% nameList$value,
!word2 %in% nameList$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
filter(n > 2)
df %>%
select(text) %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
filter(n > 2)
#Tf-idf Bigram
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(house, bigram, sort = TRUE) %>%
bind_tf_idf(bigram, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 100)
#Tf-idf Bigram
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(house, bigram, sort = TRUE) %>%
bind_tf_idf(bigram, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 100) %>%
select(house, bigram, tf_idf)
#Bigram feature
df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(house, bigram) %>%
filter(n > 2)
bigram <- df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"),
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"),
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),
!str_detect(word1, pattern = "\\b(.)\\b")) %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(house, bigram) %>%
filter(n > 2)
#Tf-idf Bigram
bigramtfidf <- df %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% names$value,
!word2 %in% names$value) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(house, bigram, sort = TRUE) %>%
bind_tf_idf(bigram, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 100) %>%
select(house, bigram, tf_idf)
#Shared bigrams
bigramtfidf %>% filter(bigram%in% bigram$bigram) %>%
group_by(house) %>%
count(house)
#Shared bigrams
bigramtfidf %>% filter(bigram %in% bigram$bigram) %>%
group_by(house) %>%
count(house)
View(bigram)
#Shared bigrams
bigramtfidf %>% filter(bigram %in% bigram$bigram) %>%
group_by(house) %>%
count(house)
#Shared bigrams
bigramtfidf %>%
filter(bigram %in% bigram$bigram) %>%
group_by(house) %>%
count(house)
View(bigramtfidf)
View(bigram)
#Shared bigrams
bigramtfidf %>%
filter(bigramtfidf$bigram %in% bigram$bigram) %>%
group_by(house) %>%
count(house)
#Shared bigrams
bigramtfidf
#Shared bigrams
bigramtfidf %>%
filter(bigram %in% bigram$bigram)
#Shared bigrams
bigramtfidf %>%
filter(`bigram` %in% bigram$bigram)
#Shared bigrams
bigramtfidf %>%
inner_join(bigram, by = c("bigram"="bigram"))
#Shared bigrams
bigramtfidf %>%
inner_join(bigram, by = c("bigram"="bigram")) %>%
nrow()
#Shared bigrams
bigramtfidf %>%
inner_join(bigram, by = c("bigram"="bigram")) %>%
group_by(house) %>%
count(house)
#Shared bigrams
bigramtfidf %>%
filter(bigramtfidf$bigram %in% bigram$bigram)
#Shared bigrams
bigramtfidf %>%
left_join(bigram, by c("bigram" = "bigram"))
#Shared bigrams
bigramtfidf %>%
left_join(bigram, by = c("bigram" = "bigram")) %>%
#Shared bigrams
bigramtfidf %>%
left_join(bigram, by = c("bigram" = "bigram"))
#Shared bigrams
bigramtfidf %>%
left_join(bigram, by = c("bigram" = "bigram"))
#Shared bigrams
bigramtfidf %>%
left_join(bigram, by = c("bigram" = "bigram")) %>%
count(house.x, house.x)
#Shared bigrams
bigramtfidf %>%
inner_join(bigram, by = c("bigram" = "bigram")) %>%
count(house.x, house.x)
View(bigramtfidf)
View(bigram)
View(bigram)
bigramtfidf %>% group_by(house) %>% top_n(tf_idf, n = 10) %>% rename("house" = house, "word" = word, "value" = tf_idf) %>%
rbind(bigram %>% group_by(house) %>% top_n(n, n =10) %>% rename("house" = house, "word" = word, "value" = n))
bigramtfidf %>% group_by(house) %>% top_n(tf_idf, n = 10) %>% rename("house" = house, "bigram" = bigram, "value" = tf_idf) %>%
rbind(bigram %>% group_by(house) %>% top_n(n, n =10) %>% rename("house" = house, "bigram" = bigram, "value" = n))
bigramtfidf %>%
group_by(house) %>%
top_n(tf_idf, n = 10) %>%
rename("house" = house, "bigram" = bigram, "value" = tf_idf) %>%
mutate(type = "tf-idf") %>%
rbind(bigram %>%
group_by(house) %>%
top_n(n, n =10) %>%
rename("house" = house, "bigram" = bigram, "value" = n) %>%
mutate(type = "ngram"))
bigramtfidf %>%
group_by(house) %>%
top_n(tf_idf, n = 10) %>%
rename("house" = house, "bigram" = bigram, "value" = tf_idf) %>%
mutate(type = "tf-idf") %>%
rbind(bigram %>%
group_by(house) %>%
top_n(n, n =10) %>%
rename("house" = house, "bigram" = bigram, "value" = n) %>%
mutate(type = "ngram")) %>%
ggplot(mapping = aes(x = reorder_within(bigram, value, house), y = value, color = house, fill = house)) + geom_col() + scale_x_reordered() + facet_grid(cols = vars(type), rows = vars(house), scales = "free")
bigramtfidf %>%
group_by(house) %>%
top_n(tf_idf, n = 10) %>%
rename("house" = house, "bigram" = bigram, "value" = tf_idf) %>%
mutate(type = "tf-idf") %>%
rbind(bigram %>%
group_by(house) %>%
top_n(n, n =10) %>%
rename("house" = house, "bigram" = bigram, "value" = n) %>%
mutate(type = "ngram")) %>%
ggplot(mapping = aes(x = reorder_within(bigram, value, house),
y = value,
color = house, fill = house)) +
geom_col() +
scale_x_reordered() +
facet_grid(cols = vars(type), rows = vars(house), scales = "free_y")
bigramtfidf %>%
group_by(house) %>%
top_n(tf_idf, n = 10) %>%
rename("house" = house, "bigram" = bigram, "value" = tf_idf) %>%
mutate(type = "tf-idf") %>%
rbind(bigram %>%
group_by(house) %>%
top_n(n, n =10) %>%
rename("house" = house, "bigram" = bigram, "value" = n) %>%
mutate(type = "ngram")) %>%
ggplot(mapping = aes(x = reorder_within(bigram, value, house),
y = value,
color = house, fill = house)) +
geom_col() +
scale_x_reordered() +
facet_grid(cols = vars(type), rows = vars(house), scales = "free") + coord_flip()
bigramtfidf %>%
group_by(house) %>%
top_n(tf_idf, n = 10) %>%
rename("house" = house, "bigram" = bigram, "value" = tf_idf) %>%
mutate(type = "tf-idf") %>%
rbind(bigram %>%
group_by(house) %>%
top_n(n, n =10) %>%
rename("house" = house, "bigram" = bigram, "value" = n) %>%
mutate(type = "ngram")) %>%
ggplot(mapping = aes(x = reorder_within(bigram, value, house),
y = value,
color = house, fill = house)) +
geom_col() +
scale_x_reordered() +
facet_wrap(~type + house, scales = "free") + coord_flip()
#Plot comparing top 10 words from tf-idf and bow
df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
count(house, word, sort = TRUE) %>%
bind_tf_idf(word, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 10)
#Plot comparing top 10 words from tf-idf and bow
df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
count(house, word, sort = TRUE) %>%
bind_tf_idf(word, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 10) %>%
select(house, word, tf_idf) %>%
mutate(type = "tf-idf") %>%
rename("value" = tf_idf)
df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
group_by(house) %>%
count(house, word) %>%
top_n(n, n = 10)
df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
group_by(house) %>%
count(house, word) %>%
top_n(n, n = 10) %>%
mutate(type = "bow") %>%
rename("value" = n)
rbind(df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
count(house, word, sort = TRUE) %>%
bind_tf_idf(word, house, n) %>%
group_by(house) %>%
top_n(tf_idf, n = 10) %>%
select(house, word, tf_idf) %>%
mutate(type = "tf-idf") %>%
rename("value" = tf_idf), df %>%
get_sentences() %>%
unnest_tokens(word, "text") %>%
filter(!word %in% names$value) %>%
filter(!word %in% stop_words$word) %>%
group_by(house) %>%
count(house, word) %>%
top_n(n, n = 10) %>%
mutate(type = "bow") %>%
rename("value" = n)) %>%
ggplot(mapping = aes(x = reorder_within(word, value, house), y = value, color = house, fill = house)) + geom_col() +
scale_x_reordered() + facet_wrap(~type + house, scales = "free") + coord_flip()
