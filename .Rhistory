unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
filter(tf_idf != 0) %>%
group_by(line) %>%
filter(tf_idf = max(tf_idf))
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
filter(tf_idf != 0) %>%
group_by(line) %>%
filter(tf_idf == max(tf_idf))
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
filter(tf_idf != 0) %>%
group_by(line)
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
filter(tf_idf != 0) %>%
group_by(line) %>%
arrange(line, tf_idf)
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
filter(tf_idf != 0) %>%
group_by(line) %>%
arrange(line, -tf_idf)
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
filter(tf_idf != 0) %>%
group_by(line) %>%
arrange(word)
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
filter(tf_idf != 0) %>%
group_by(line) %>%
arrange(tf_idf)
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
group_by(line) %>%
arrange(tf_idf)
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
group_by(line) %>%
arrange(-tf_idf)
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
group_by(line)
df <- data.frame("character" = c("John","John","John","John","Mary","Mary","Mary","Mary"),
"text" = c("I like dogs.",
"I like cats.",
"I like turtles.",
"I like penguins.",
"I hate dogs",
"I hate cats",
"I hate turtles",
"I hate penguins"), line = 1:8)
df$text <- df$text %>% as.character()
df %>%
unnest_tokens(word, text) %>%
count(line, word) %>%
bind_tf_idf(word, line, n) %>%
group_by(line)
df %>%
unnest_tokens(word, text) %>%
count(character, word) %>%
bind_tf_idf(word, character, n) %>%
group_by(line)
df %>%
unnest_tokens(word, text) %>%
count(character, word) %>%
bind_tf_idf(word, character, n) %>%
group_by(character)
df %>%
unnest_tokens(word, text) %>%
count(character, word) %>%
bind_tf_idf(word, character, n) %>%
group_by(character) %>%
top_n(tf_idf, n = 1)
df %>% unnest_tokens(word,text) %>%
count(character, word)
df %>% unnest_tokens(word,text) %>%
count(character, word) %>%
top_n(n, n =1)
df %>% unnest_tokens(word,text) %>%
count(character, word) %>%
group_by(character) %>%
top_n(n, n =1)
(tf_idf, n = 1)
df %>%
unnest_tokens(word, text) %>%
count(character, word) %>%
bind_tf_idf(word, character, n) %>%
group_by(character) %>%
top_n(tf_idf, n = 1)
df %>% unnest_tokens(word,text) %>%
count(character, word) %>%
group_by(character) %>%
top_n(n, n =1)
library(rattle)
rattle()
library(rattle)
rattle()
library(caret)
library(tidyverse)
iris
model <- train(Species~.,
data = iris,
method = "rf",
trCOntrol = trainControl(method = "boot",
classProbs = TRUE,
summaryFunction = multiClassSummary))
model
multiClassSummary(model)
multiClassSummary(model$pred)
multiClassSummary(model$pred, model$results)
?multiClassSummary
model$pred
model$finalModel$predicted
model$finalModel$y
model$finalModel$obsLevels
multiClassSummary(iris,model$finalModel$obsLevels, model)
multiClassSummary(iris,model$finalModel$obsLevels, model)
model$finalModel
model$finalModel$confusion
confusionMatrix(model)
model
model <- train(Species~.,
data = iris,
method = "rf",
trCOntrol = trainControl(method = "boot",
classProbs = TRUE,
summaryFunction = multiClassSummary),
metric = "recall")
extractProb(model)
extractProb(model$finalModel)
predict(model, iris, type = "prob")
predict(model, iris, type = "prob") %>% cbind(iris$Species)
library(rattle)
rattle()
library(rattle)
rattle()
mtcars
df <- mtcars
df$efficient <- ifelse(df$mpg <20, 0,1)
df$efficient2 <- as.numeric(df$mpg < 20)
df$efficient
df$efficient2
df$efficient2 <- as.numeric(df$mpg >= 20)
df$efficient2
df$mpg
View(df)
df <- mtcars
df$efficient <- ifelse(df$mpg <20, 0,1)
df$efficient2 <- as.numeric(df$mpg >= 20)
str(df)
library(tidyverse)
library(caret)
iris
logModel <- train(Species~., data = iris, method = "logreg")
logModel <- train(Species~., data = iris, method = "logreg")
df <- iris
df
logModel <- train(Species~., data = df, method = "logreg")
modelLookup("logreg")
df %>% filter(Species == c("virginica", "setosa"))
test <- df %>% filter(Species == c("virginica", "setosa"))
logModel <- train(Species~., data = test, method = "logreg")
test
logModel <- train(Species~., data = test %>% na.omit(), method = "logreg")
test %>% str()
logModel <- train(Species~., data = df %>% na.omit(), method = "logreg")
warnings()
logModel <- train(Species~., data = df, method = "glm")
logModel <- train(Species~., data = df, method = "multinom")
logModel
plot(logModel)
modelLookup("multinom")
library(tidyverse)
library(caret)
setwd("~/R work/SortingHat")
df <- readRDS("harrypotter.csv")
df <- readRDS("harrypotter.rds")
library(tidyverse)
library(caret)
df <- readRDS("harrypotter.rds")
str(df)
df$character <- NULL
df %>% str()
df$TargetHouse <- as.factor(df$TargetHouse)
upSample <- upSample(df %>% select(-TargetHouse), df$TargetHouse)
baseLineModel <- train(Class~., data = upSample, method = 'multinom')
warnings()
View(upSample)
trainIndex <- createDataPartition(upSample$Class, p = 2/3, list = FALSE)
trainData <- upSample[trainIndex,]
testData <- upSample[-trainIndex,]
baseLineModel <- train(Class~., data = trainData %>% head(), method = 'multinom')
baseLineModel <- train(Class~., data = trainData[1:100,], method = 'multinom')
baseLineModel <- train(Class~., data = trainData, method = 'multinom')
library(tidyverse)
library(caret)
df <- readRDS("harrypotter.rds")
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
upSample <- upSample(df %>% select(-TargetHouse), df$TargetHouse)
trainIndex <- createDataPartition(upSample$Class, p = 2/3, list = FALSE)
trainData <- upSample[trainIndex,]
testData <- upSample[-trainIndex,]
baseLineModel <- train(Class~., data = trainData, method = 'multinom')
baseLineModel
trainData$Class %>% group_by(Class) %>% count()
trainData$Class %>% count()
trainData$Class
trainData$Class %>%
unique()
library(tidyverse)
library(caret)
df <- iris
set.seed(40)
MultinomialLogReg <- train(Species~., method = "multinom", data = df)
NaiveBayesClassifier <- train(Species~., method = "naive_bayes", data = df)
RegularizedL1Regression <- train(Species~., method = "PenalizedLDA", data = df)
modelLookup("PenalizedLDA")
RegularizedL1Regression <- train(Species~., method = "glmnet", data = df)
RegularizedL2Regression <- train(Species~., method = "plr", data = df)
ElasticNet <- train(Species~., method = "glmnet", data = df)
MARS <- train(Species~., method = "earth", data = df)
MARS <- train(Species~., method = "earth", data = df)
SVM <- train(Species~., method = "svmLinear", data = df)
SVM <- train(Species~., method = "svmLinear", data = df)
XGBoost <- train(Species~., method = "XGBoostLinear", data = df)
XGBoost <- train(Species~., method = "xgboostLinear", data = df)
XGBoost <- train(Species~., method = "xgbLinear", data = df)
MARS <- train(Species~., method = "gcvEarth", data = df)
MARS <- train(Species~., method = "fda", data = df)
comparisons <- resamples(list("LogisticReg" = MultinomialLogReg, "NaiveBayes" = NaiveBayesClassifier, "L1" = RegularizedL1Regression, "L2" = RegularizedL2Regression, "ElasticNets" = ElasticNet, "SVM" = SVM, "XGBoost" = XGBoost, "MARS" = MARS))
summary(comparisons)
bwplot(comparisons)
varImp(RegularizedL1Regression)
varImp(RegularizedL2Regression)
varImp(ElasticNet)
summary(comparisons)
RegularizedL1Regression <- train(Species~., method = "PenalizedLDA", data = df)
RegularizedL1Regression <- train(Species~., method = "glment", data = df,
tuneGrid = expand.grid(alpha = 1, lambda = 10^seq(-3,3, length = 100)))
RegularizedL2Regression <- train(Species~., method = "glment", data = df,
tuneGrid = expand.grid(alpha = 0, lambda = 10^seq(-3,3, length = 100)))
RegularizedL1Regression <- train(Species~., method = "glmnet", data = df,
tuneGrid = expand.grid(alpha = 1, lambda = 10^seq(-3,3, length = 100)))
RegularizedL2Regression <- train(Species~., method = "glmnet", data = df,
tuneGrid = expand.grid(alpha = 0, lambda = 10^seq(-3,3, length = 100)))
ElasticNet <- train(Species~., method = "glmnet", data = df,
tuneLength = 50)
RegularizationComparison <- resamples(list("L1" = RegularizedL1Regression,
"L2" = RegularizedL2Regression,
"Elastic" = ElasticNet))
summary(RegularizationComparison)
bwplot(RegularizationComparison)
summary(RegularizationComparison)
bwplot(RegularizationComparison)
varImp(RegularizedL1Regression)
varImp(RegularizedL2Regression)
dotplot(RegularizationComparison)
library(tidyverse)
library(caret)
df <- readRDS("harrypotter.rds")
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
upSample <- upSample(df %>% select(-TargetHouse), df$TargetHouse)
trainIndex <- createDataPartition(upSample$Class, p = 2/3, list = FALSE)
trainData <- upSample[trainIndex,]
testData <- upSample[-trainIndex,]
library(tidyverse)
library(caret)
df <- readRDS("harrypotter.rds")
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
upSample <- upSample(df %>% select(-TargetHouse), df$TargetHouse)
trainIndex <- createDataPartition(upSample$Class, p = .8, list = FALSE)
trainData <- upSample[trainIndex,]
testData <- upSample[-trainIndex,]
library(doParallel)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
baseLineModel <- train(Class~., data = trainData, method = 'multinom')
baseLineModel <- train(Class~., data = upSample, method = 'multinom')
upSample$Class
modelData <- caret::upSample(x = df[,2:285], y = df$TargetHouse)
stopCluster(cl)
library(tidyverse)
library(caret)
library(doParallel)
df <- readRDS("harrypotter.rds")
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
modelData <- upSample(x = df[,2:285], y = df$TargetHouse)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
baseLineModel <- train(Class~., data = modelData, method = 'multinom')
View(modelData)
modelData %>% is.na() %>% sum()
levels(modelData$Class)
baseLineModel <- train(Class~., data = modelData, method = 'multinom', trControl = trainControl(method = "repeatedcv", repeats = 10, number = 10))
modelData %>% is.na() %>% sum()
stopCluster(cl)
baseLineModel <- train(Class~.,
data = modelData,
method = 'logreg',
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
baseLineModel <- train(Class~.,
data = modelData,
method = 'logreg',
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
modelData$Class <- as.factor(modelData$Class)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
baseLineModel <- train(Class~.,
data = modelData,
method = 'logreg',
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
baseLineModel <- train(Class~.,
data = modelData,
method = 'bayesglm',
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
baseLineModel
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
BoxCoxModel <- train(Class~.,
data = modelData,
method = 'bayesglm',
preProc = c("BoxCox"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
YeoJohnsonModel <- train(Class~.,
data = modelData,
method = 'bayesglm',
preProc = c("YeoJohnson"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
CenterScaleModel <- train(Class~.,
data = modelData,
method = 'bayesglm',
preProc = c("center","scale"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
BoxCoxModel
CenterScaleModel
source('E:/School/R Work/SortingHat/LogisticRegressionModel.R', echo=TRUE)
YeoJohnsonModel
BoxCoxModel
CenterScaleModel
YeoJohnsonModel
BoxCoxModel
CenterScaleModel
YeoJohnsonModel
BoxCoxModel
CenterScaleModel
YeoJohnsonModel
source('E:/School/R Work/SortingHat/LogisticRegressionModel.R', echo=TRUE)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
BoxCoxModel <- train(Class~.,
data = modelData,
method = 'bayesglm',
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
YeoJohnsonModel <- train(Class~.,
data = modelData,
method = 'bayesglm',
preProc = c("YeoJohnson","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
CenterScaleModel <- train(Class~.,
data = modelData,
method = 'bayesglm',
preProc = c("center","scale","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
BoxCoxModel
CenterScaleModel
YeoJohnsonModel
BoxCoxModel %>% confusionMatrix()
CenterScaleModel %>% confusionMatrix()
YeoJohnsonModel %>% confusionMatrix()
modelData %>% select(Class) %>% count(Class,Class)
library(tidyverse)
library(caret)
library(doParallel)
df <- readRDS("harrypotter.rds")
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
modelData <- upSample(x = df[,2:285], y = df$TargetHouse)
levels(modelData$Class)
modelData$Class <- as.factor(modelData$Class)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
baseLineModel <- train(Class~.,
data = modelData,
method = 'LogitBoost',
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
baseLineModel
baseLineModel %>% varimax()
baseLineModel %>% varImp()
baseLineModel %>% confusionMatrix()
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
LogisticModelTrees <- train(Class~.,
data = modelData,
method = 'LMT',
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
LogisiticModelTrees
LogisticModelTrees
baseLineModel$coefnames
baseLineModel
baseLineModel$modelInfo
baseLineModel
baseLineModel %>% plot()
BoostedLogisticRegression %>% varImp()
baseLineModel %>% varImp()
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
BoxCoxModel <- train(Class~.,
data = modelData,
method = 'LogitBoost',
preProc = c("BoxCox"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
YeoJohnsonModel <- train(Class~.,
data = modelData,
method = 'LogitBoost',
preProc = c("YeoJohnson"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
CenterScale <- train(Class~.,
data = modelData,
method = 'LogitBoost',
preProc = c("center","scale"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
BoxCoxModel
YeoJohnsonModel
CenterScale
scalingList <- resamples(list("BoxCox" = BoxCoxModel, "YeoJohnson" = YeoJohnsonModel, "CenterScale" = CenterScale))
summary(scalingList)
bwplot(scalingList)
dotPlot(scalingList)
dotPlot(scalingList)
dotplot(scalingList)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
PCAYeoJohnson <- train(Class~.,
data = modelData,
method = 'LogitBoost',
preProc = c("YeoJohnson", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
PCAYeoJohnson
comparison <- resamples(list("YeoJohnson" = YeoJohnsonModel, "PCA" = YeoJohnsonModel))
summary(comparison)
dotplot(comparison)
saveRDS(YeoJohnsonModel, "LogisticRegressionModel.rds")
