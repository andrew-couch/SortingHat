get_sentences() %>%
unnest_tokens("word", `text`) %>%
count(`word`)
df %>%
group_by(book) %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word)
df %>%
group_by(book) %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word) %>% group_by(book) %>% top_n(n, n = 10)
df %>%
group_by(book) %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word) %>%
group_by(book) %>%
top_n(n, n = 10) %>% unique()
df %>%
group_by(book) %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word) %>%
group_by(book) %>%
top_n(n, n = 10) %>% unique(book, element_id,word, n)
df %>%
group_by(book) %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word) %>%
select(book, word, n) %>%
group_by(book) %>%
top_n(n, n = 10)
df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word) %>%
select(book, word, n) %>%
unique(book, word, n) %>%
group_by(book) %>%
top_n(n, n = 10)
df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word) %>%
select(book, word, n) %>%
unique(book, word, n)
df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word) %>%
select(book, word, n) %>%
unique()
df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word) %>%
select(book, word, n) %>%
unique() %>%
group_by(book) %>%
top_n(n, n = 10)
df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
add_count(word) %>%
select(book, word, n) %>%
filter(!word %in% stop_words$word) %>%
unique() %>%
group_by(book) %>%
top_n(n, n = 10)
df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
filter(!word %in% stop_words$word) %>%
add_count(word) %>%
select(book, word, n) %>%
unique() %>%
group_by(book) %>%
top_n(n, n = 10)
df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
filter(!word %in% stop_words$word) %>%
add_count(word) %>%
select(book, word, n) %>%
unique() %>%
group_by(book) %>%
top_n(n, n = 10) %>% arrange(book, n)
df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
filter(!word %in% stop_words$word) %>%
add_count(word) %>%
select(book, word, n) %>%
unique() %>%
group_by(book) %>%
top_n(n, n = 10) %>% arrange(book, -n)
topWords <- df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
filter(!word %in% stop_words$word) %>%
add_count(word) %>%
select(book, word, n) %>%
unique() %>%
group_by(book) %>%
top_n(n, n = 10) %>% arrange(book, -n)
topWords
topWords %>% ggplot(mapping = aes(x = reorder(word, n), y = n, color = book, fill = book)) + geom_col()
topWords %>% ggplot(mapping = aes(x = reorder(word, n), y = n, color = book, fill = book)) + geom_col() + facet_wrap(~book, scales = "free")
View(topWords)
topWords %>% arrange(word)
topWords <- df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
filter(!word %in% stop_words$word)
topWords %>% colnames()
topWords %>% select(book, word)
topWords %>%
select(book, word) %>%
count(word) %>%
group_by(book) %>%
top_n(n, n = 3)
topWords %>%
select(book, word) %>%
count(word)
topWords %>%
select(book, word) %>%
count(word) %>% ungroup
topWords %>%
select(book, word) %>%
count(word) %>% ungroup()
topWords %>%
select(book, word) %>%
count(word)
topWords %>%
select(book, word) %>%
tally(word)
topWords %>%
select(book, word) %>%
tally(word)
topWords %>%
select(book, word)
topWords %>%
select(book, word) %>% group_by(book)
topWords %>%
select(book, word) %>%
group_by(book) %>% top_n(tally(word), n = 5)
topWords %>%
select(book, word) %>%
group_by(book) %>% top_n(count(word), n = 5)
topWords %>%
select(book, word) %>%
group_by(book)
topWords %>%
select(book, word) %>%
group_by(book) %>%
count(word)
topWords %>%
select(book, word) %>%
group_by(book) %>%
count(word) %>%
top_n(n, n =3)
topWords %>%
select(book, word) %>%
group_by(book) %>%
count(word) %>%
top_n(n, n =10)
topWords %>%
select(book, word) %>%
group_by(book) %>%
count(word) %>%
top_n(n, n =10) %>% unique(word)
topWords %>%
select(book, word) %>%
group_by(book) %>%
count(word) %>%
top_n(n, n =10) %>%
unique(word)
topWords %>%
select(book, word) %>%
group_by(book) %>%
count(word) %>%
top_n(n, n =10) %>%
select(word) %>% unique()
topWords %>%
select(book, word) %>%
group_by(book) %>%
count(word) %>%
top_n(n, n =10) %>%
ungroup() %>%
select(word) %>% unique()
topWords %>%
select(book, word) %>%
group_by(book) %>%
count(word) %>%
top_n(n, n =10)
topWords <- df %>%
get_sentences() %>%
unnest_tokens("word", `text`) %>%
filter(!word %in% stop_words$word) %>%
select(book, word) %>%
group_by(book) %>%
count(word) %>%
top_n(n, n =10)
topWords
topWords %>% ggplot(mapping = aes(x = reorder(word, n), y = n, color = book, fill = book)) + geom_col() + coord_flip()
topWords %>% ggplot(mapping = aes(x = reorder(word, n), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% ggplot(mapping = aes(x = reorder(word, n), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange()
topWords %>% arrange(book, n)
topWords %>% arrange(book, -n)
topWords %>% arrange(book, -n) %>% mutate(order = row_number())
topWords %>% arrange(book, -n) %>% mutate(order = row_number()) %>% ggplot(mapping = aes(x = reorder(word, order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange(book, -n) %>% mutate(order = row_number()) %>% ggplot(mapping = aes(x = reorder(word, -order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange(book, -n) %>% mutate(order = row_number()) %>% ggplot(mapping = aes(x = order, y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange(book, -n) %>% mutate(order = row_number()) %>% ggplot(mapping = aes(x = reorder(order, -order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange(book, -n) %>% mutate(order = row_number()) %>% ggplot(mapping = aes(x = reorder(word, -order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange(book, -n) %>% ungroup() %>% mutate(order = row_number()) %>% ggplot(mapping = aes(x = reorder(word, -order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange(book, -n) %>% ungroup() %>% mutate(order = row_number()) %>% ggplot(mapping = aes(x = reorder(word, order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange(book, -n) %>% ungroup() %>% mutate(order = row_number()) %>% factor(topWords$word, levels = topWords$word[order(x$order)]) %>% ggplot(mapping = aes(x = reorder(word, order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange(book, -n) %>% ungroup() %>% mutate(order = row_number()) %>% factor(topWords$word, levels = topWords$word[order(topWords$order)]) %>% ggplot(mapping = aes(x = reorder(word, order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords %>% arrange(book, -n) %>% ungroup() %>% mutate(order = row_number())
topWords %>% arrange(book, -n) %>% ungroup() %>% mutate(order = row_number()) %>% factor(topWords$word, levels = topWords$word[order(topWords$order)])
topWords <- topWords %>% arrange(book, -n) %>% ungroup() %>% mutate(order = row_number())
factor(topWords$word, levels = topWords$word[order(topWords$n)])
factor(topWords$word, levels = topWords$word[order(topWords$order)])
ggplot(mapping = aes(x = reorder(word, n), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder(word, n), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder(word, n), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords <- topWords %>% arrange(book, -n) %>% group_by(book) %>% mutate(order = row_number())
ggplot(data = topWords,mapping = aes(x = reorder(word, order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
topWords
topWords %>% view()
unique(topWords$book)
books <- unique(topWords$book)
ggplot(data = topWords,mapping = aes(x = reorder(word, order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder(word, -order), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder(word, -order), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
reorder()
>?reorder
?reorder
ggplot(data = topWords,mapping = aes(x = reorder(word, -order), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_grid(~book)
ggplot(data = topWords,mapping = aes(x = reorder(word, -order), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_grid(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder(word, -order), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder_within(topWords, word, n), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder_within(word, n), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder_within(word, n, book), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder_within(word, n), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder_within(word, n, book), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder_within(book, n, word), y = n, color = book, fill = book, group = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder_within(book, n, word), y = n, color = book, fill = book) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = reorder_within(book, n, word), y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords,mapping = aes(x = word, y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
reorder_within(word, n, book)
topWords %>% reorder_within(word, n, book)
ggplot(data = topWords,mapping = aes(x = word, y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free_x")
ggplot(data = topWords,mapping = aes(x = word, y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free_y")
ggplot(data = topWords,mapping = aes(x = word, y = n, color = book, fill = book)) + geom_col() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book), n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free_x")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book), n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free_x")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book), n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free_x") + coord_flip()
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book), n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free_x")
ggplot(data = topWords, mapping = aes(y = reorder_within(word, n, book), x = n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free_x")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book), n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free_x")
ggplot(data = topWords, mapping = aes(reorder_within(word, -n, book), n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free_x")
ggplot(data = topWords, mapping = aes(reorder_within(word, -n, book), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free_x")
ggplot(data = topWords, mapping = aes(reorder_within(word, -n, book), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free_y")
ggplot(data = topWords, mapping = aes(reorder_within(word, -n, book), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = ""), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n,, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n,word, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n," ", sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + scale_y_reordered() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + scale_x_reordered() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) +  scale_x_reordered() + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) +  coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n,book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n,"word", sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + coord_flip() + facet_wrap(~book, scales = "free")
topWords
topWords %>% arrange(n)
topWords %>% group_by(book) %>% arrange(desc(n))
topWords %>% group_by(book) %>% arrange(desc(n))
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free") + coord_flip()
test <- topWords
test$book <- factor(test$book, levels = c("philosophers_stone","chamber_of_secrets","prisoner_of_azkaban","goblet_of_fire","order_of_the_phoenix","half_blood_prince","deathly_hallows"))
test$book
ggplot(data = test, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free") + coord_flip()
topWords$book <- factor(topWords$book, levels = c("philosophers_stone","chamber_of_secrets","prisoner_of_azkaban","goblet_of_fire","order_of_the_phoenix","half_blood_prince","deathly_hallows"))
ggplot(data = topWords, mapping = aes(reorder_within(word, n, book, sep = " "), n)) + geom_col(aes(color = book, fill = book)) + facet_wrap(~book, scales = "free") + coord_flip()
topWords %>% filter(word %in% c("harry","ron","hermione"))
topWords %>% filter(word %in% c("harry","ron","hermione")) %>% ggplot(mapping = aes(x = book, y = n, group = word)) + geom_line()
topWords %>% filter(word %in% c("harry","ron","hermione")) %>% ggplot(mapping = aes(x = book, y = n, group = word, color = book)) + geom_line()
topWords %>% filter(word %in% c("harry","ron","hermione")) %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10() %>% theme_minimal()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10() %>% theme_classic()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10() %>% theme_void()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10() + theme_classic()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10() + theme_light()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10() + theme_dark()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10() + theme_minimal()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10() + theme_void()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10() + theme_bw()
#use of harry, ron, and hermione in the books
topWords %>% ggplot(mapping = aes(x = book, y = n, group = word, color = word)) + geom_line() + scale_y_log10()
library(tidyverse)
library(tidytext)
library(harrypotter)
library(sentimentr)
philosophers_stone <- philosophers_stone %>% as.data.frame()
chamber_of_secrets <- chamber_of_secrets %>% as.data.frame()
prisoner_of_azkaban <- prisoner_of_azkaban %>% as.data.frame()
goblet_of_fire <- goblet_of_fire %>% as.data.frame()
order_of_the_phoenix <- order_of_the_phoenix %>% as.data.frame()
half_blood_prince <- half_blood_prince %>% as.data.frame()
deathly_hallows <- deathly_hallows %>% as.data.frame()
philosophers_stone$book <- "philosophers_stone"
chamber_of_secrets$book <- "chamber_of_secrets"
prisoner_of_azkaban$book <- "prisoner_of_azkaban"
goblet_of_fire$book <- "goblet_of_fire"
order_of_the_phoenix$book <- "order_of_the_phoenix"
half_blood_prince$book <- "half_blood_prince"
deathly_hallows$book <- "deathly_hallows"
df <- rbind(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban, goblet_of_fire, order_of_the_phoenix, half_blood_prince, deathly_hallows)
colnames(df) <- c("text", "book")
#Finds said synonyms for Harry
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "harry" | word2 == "harry") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
filter(substr(value, start = nchar(value), stop = nchar(value)) == "d")
#dialogueVerbs is the entire list of said synonyms used to find characters in the books
dialogueVerbs <- c("accused", "agreed", "announced", "answered", "argued", "assured","begged","blurted","called","challenged","cheered","confessed","convinced","cried","decided","echoed","explained","fretted","gasped","guessed","hissed","imitated","informed","interjected","interrupted","japped","persuaded","promised","prompted","protested","read","replied","responded","retold","roared","scowled","screamed","screeched","shared","shouted","shurgged","snarled","sniggered","snorted","squeled","squeaked","stammered","said","told","voiced","wailed","whimpered","whispered","worried","yawned","yelled","yelped")
dialogueVerbs <- as.data.frame(dialogueVerbs)
#Finds said synonyms for Ron
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "ron" | word2 == "ron") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
filter(substr(value, start = nchar(value), stop = nchar(value)) == "d") %>%
select(value) %>%
anti_join(dialogueVerbs, by = c("value" = "dialogueVerbs"))
#Uses holder to add synonyms to a dataframe
addedWords <- c("added","breathed","barked","breathed","chortled","demanded","exchanged","exclaimed","intervened","moaned","mumbled","offered","retorted","shocked","sighed","sneered","spluttered","suggested") %>% as.data.frame()
colnames(addedWords) <- "dialogueVerbs"
dialogueVerbs <-  rbind(dialogueVerbs, addedWords)
#Finds said synonyms for Hermione
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "hermione" | word2 == "hermione") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
filter(substr(value, start = nchar(value), stop = nchar(value)) == "d") %>%
select(value) %>%
anti_join(dialogueVerbs, by = c("value" = "dialogueVerbs"))
addedWords <- c("added","bemused","bickered","choked","cooed","elaborated","giggled","groaned","jeered","laughed","mentioned","murmured","muttered","reminded","scoffed","shrieked","squealed","talked","warned","winced") %>% as.data.frame()
colnames(addedWords) <- "dialogueVerbs"
dialogueVerbs <-  rbind(dialogueVerbs, addedWords)
#Finds said synonyms for Malfoy
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "malfoy" | word2 == "malfoy") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
filter(substr(value, start = nchar(value), stop = nchar(value)) == "d") %>%
select(value) %>%
anti_join(dialogueVerbs, by = c("value" = "dialogueVerbs"))
addedWords <- c("bawled","bellowed","chuckled","howled","mouthed") %>% as.data.frame()
colnames(addedWords) <- "dialogueVerbs"
dialogueVerbs <- rbind(dialogueVerbs, addedWords)
#Finds characters by using bigrams, if word has said than it could be harry said or said harry
firstNameLexicon <- lexicon::freq_first_names
firstNameLexicon <- firstNameLexicon %>% select(Name)
firstNameLexicon <-  sapply(firstNameLexicon, tolower) %>% as.data.frame()
colnames(firstNameLexicon) <- "names"
#uses freq_first_names lexicon to find names in harry potter
#many names missing but still is worth doing
nameList <- df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs | word2 %in% dialogueVerbs$dialogueVerbs) %>%
gather() %>%
select(value) %>%
unique() %>%
filter(!value %in% dialogueVerbs$dialogueVerbs) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
arrange(value) %>%
filter(value %in% firstNameLexicon$names)
#filters out old names
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs | word2 %in% dialogueVerbs$dialogueVerbs) %>%
gather() %>%
select(value) %>%
unique() %>%
filter(!value %in% dialogueVerbs$dialogueVerbs) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
arrange(value) %>%
anti_join(nameList, by = c("value" = "value")) %>%
view()
#Manually finding names (first and last that were missed)
#Didn't use freq_last name lexicon because potential overalp with regular words
newNames <- c("cho","crabbe","dobby","dolhov","draco","dully","dumbledore","dursley","finnigan","firenze","fleur","flitwick","goyle","granger","gregorovitch","grindelvald","gridenlwald","hargrid","harry","harper","hermione","igro","jones","jorkins","karakoff","kingsley","kirke","kreacher","krum","lovegood","lucius","lupin","macmillan","macnair","malfoy","malkin","mcgonagall","mclaggen","mcmillan","nagini","ninny","nox","nymphadora","o'flaherty","olivander","padma","parkinson","parvati","phineas","pomona","potter","professor","riddle","roberts","romilda","romulus","ronan","rookwood","scropious","seamus","sirius","snape","snivellus","snivelus","tonks","tosh","trelawney","umbridge","uncle","voldemort","warrington","weasley","weaseleys","wormtail","") %>% as.data.frame()
colnames(newNames) <- "value"
nameList <- rbind(nameList,newNames) %>% arrange()
#uses nameList and dialogueVerbs to find sentences in books
#finds the index (book, chapter, and sentence) where dialogue verb and name are in bigram
sentences <- df %>%
get_sentences() %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter((word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) | (word1 %in% dialogueVerbs$dialogueVerbs & word2 %in%    nameList$value)) %>%
select(-word1, -word2) %>%
unique() %>%
arrange(book, element_id, sentence_id)
#uses index to select text that has dialogue verb and name combination
text <- df %>%
get_sentences() %>%
inner_join(sentences, by = c("book" = "book", "element_id" = "element_id", "sentence_id" = "sentence_id"))
text
text$text
text[999,]
df$text %>%
get_sentences()
df %>%
get_sentences()
df %>%
get_sentences() %>%
colnames()
df %>%
get_sentences() %>%
filter(str_detect(text, '\'') == TRUE)
df %>%
get_sentences() %>%
filter(str_detect(text, '\"') == TRUE)
quotes <- df %>%
get_sentences() %>%
filter(str_detect(text, '\"') == TRUE) %>%
quotes <- df %>%
get_sentences() %>%
filter(str_detect(text, '\"') == TRUE)
quotes <- df %>%
get_sentences() %>%
filter(str_detect(text, '\"') == TRUE)
View(quotes)
View(text)
rbind(text, quotes)
fulldialogue <- rbind(text, quotes)
fulldialogue %>% colnames()
fulldialogue %>% unique(book, element_id, sentence_id)
fulldialogue %>% unique(book, element_id, sentence_id)
fulldialogue %>% unique(-text)
fulldialogue %>% unique(c(-"text"))
fulldialogue %>% unique(c("-text"))
fulldialogue %>% unique(c("book","sentence_id","element_id"))
fulldialogue %>% nrow()
fulldialogue %>% union() %>% nrow()
fulldialogue %>% unique() %>% nrow()
fulldialogue <-  fulldialogue %>% unique() %>% nrow()
fulldialogue %>% arrange(book, element_id, sentence_id)
fulldialogue
fulldialogue
fulldialogue <- rbind(text, quotes)
fulldialogue <-  fulldialogue %>% unique()
fulldialogue
fulldialogue %>% arrange(book, element_id, sentence_id)
fulldialogue <-  fulldialogue %>% arrange(book, element_id, sentence_id)
write.csv(fulldialogue, "fulldialogue.csv", row.names = FALSE)
