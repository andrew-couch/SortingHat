library(ggradar)
devtools::install_github("ricardo-bion/ggradar",
dependencies = TRUE)
devtools::install_github("ricardo-bion/ggradar")
library(ggradar)
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
ungroup() %>%
group_by(house)
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
ungroup()
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n))
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
ggradar()
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
group_by(house) %>%
as_tibble() %>%
ggradar()
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
group_by(House) %>%
as_tibble() %>%
ggradar()
ggradar(mtcars)
mtcars_radar <- mtcars %>%
as_tibble(rownames = "group") %>%
mutate_at(vars(-group), rescale) %>%
tail(4) %>%
select(1:10)
mtcars_radar <- mtcars %>%
as_tibble(rownames = "group")
mtcars_radar
ggradar(mtcars_radar)
ggradar(mtcars_radar[,2:4])
mtcasr %>%
as_tibble(rownames = "group") %>%
select(group)
iris
ggradar(iris)
irirs %>% group_by(Species)
iris %>% group_by(Species)
iris %>% as_tibble(rownames = Species)
HousePrediction <- rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
group_by(House)
HousePrediction
HousePrediction <- rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n))
HousePrediction
HousePrediction <- rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey"))
HousePrediction
HousePrediction <- rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
group_by(House) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y)
HousePrediction
HousePrediction <- rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
group_by(House) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y) %>%
select(House, n)
HousePrediction <- rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y) %>%
ungroup()
HousePrediction <- rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y) %>%
ungroup() %>%
select(House, n)
HousePrediction
HousePrediction %>% ggradar()
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y) %>%
ungroup() %>%
select(House, n) %>%
ggplot(aes(x = reorder(House, -n), y = n, fill = House))
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y) %>%
ungroup() %>%
select(House, n) %>%
ggplot(aes(x = House, y = n, fill = House))
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y) %>%
ungroup() %>%
select(House, n))
rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y) %>%
ungroup() %>%
select(House, n)
HousePredictions <- rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y) %>%
ungroup() %>%
select(House, n)
HousePredictions
HousePredictions %>% ggplot(aes(x = House, y = n )) + geom_col()
HousePredictions %>% ggplot(aes(x = House, y = n, color = House )) + geom_col()
HousePredictions %>% ggplot(aes(x = House, y = n, fill = House )) + geom_col()
HousePrediction %>% mutate(Percentage = n / sum(n))
HousePrediction %>% mutate(Percentage = 100*n / sum(n))
HousePrediction %>% mutate(Percentage = paste(100*n / sum(n), "%", sep = ""))
HousePrediction %>% mutate(Percentage = paste(round(100*n / sum(n),2), "%", sep = ""))
HousePredictions %>% ggplot(aes(x = House, y = n, fill = House )) + geom_col() + coord_polar()
ggradar(plot.data = HousePrediction)
HousePrediction
HousePrediction %>% spread()
HousePrediction %>% spread()
HousePrediction %>% spread(House)
spread(house, key = House, value = n)
spread(HousePrediction, key = House, value = n)
spread(HousePrediction, key = House, value = n) %>% ggradar()
devtools::install_github("cardiomoon/ggiraphExtra")
ggradar(HousePrediction)
ggradar(HousePredictions)
library(ggiraphExtra)
devtools::install_github("cardiomoon/ggiraphExtra")
install.packages("ggiraphExtra")
install.packages("ggiraphExtra")
install.packages("ggiraphExtra")
install.packages("ggiraphExtra")
install.packages("ggiraphExtra")
library(scales)
library(scales)
HousePredictions
HousePrediction
HousePredictions
HousePredictions %>%
mutate(UserName = UserName)
library(tidyverse)
library(rtweet)
library(tidytext)
library(sentimentr)
library(scales)
HousePredictions %>%
mutate(UserName = UserName)
library(tidyverse)
library(rtweet)
library(tidytext)
library(sentimentr)
library(scales)
userName <- "_AndrewCouch"
bow <- read.csv("bowlist.csv", header = TRUE,stringsAsFactors = FALSE)
bigram <- read.csv("bigramlist.csv", header = TRUE,stringsAsFactors = FALSE)
trigram <- read.csv("trigramlist.csv", header = TRUE,stringsAsFactors = FALSE)
token <- readRDS("twitter_token.rds")
myTweets <- get_timeline(userName, n = 3200)
tweetData <- myTweets %>%
filter(is_retweet == FALSE) %>%
select(text) %>%
mutate(userName = userName)
tweetData$text <- str_trim(gsub('http\\S+\\s*',"", tweetData$text))
tweetData$text <- gsub("(^|[^@\\w])@(\\w{1,15})\\b", "", tweetData$text)
tweetData <- tweetData %>%
filter(!text %in% c(" ", "", "   "))
bowFeatures <- tweetData %>%
unnest_tokens(word, "text") %>%
right_join(bow, by = c("word" = "bow")) %>%
count(word, word) %>%
mutate(n = n-1) %>%
spread(word, n)
bigramFeatures <- tweetData %>%
unnest_tokens(bigram, "text", token = "ngrams", n = 2) %>%
right_join(bigram, by = c("bigram" = "bigram")) %>%
count(bigram, bigram) %>%
mutate(n = n-1) %>%
spread(bigram, n)
trigramFeatures <- tweetData %>%
unnest_tokens(trigram, "text", token = "ngrams", n = 3) %>%
right_join(trigram, by = c("trigram" = "trigram")) %>%
count(trigram, trigram) %>%
mutate(n = n-1) %>%
spread(trigram, n)
sentences <- tweetData %>% select(text) %>% get_sentences()
sentiments <- cbind(
sentences %>%
sentiment((lexicon::hash_sentiment_huliu)) %>%
select(sentiment) %>%
rename("huliu" = sentiment),
sentences %>%
sentiment(lexicon::hash_sentiment_jockers_rinker) %>%
select(sentiment) %>%
rename("jockers_rinker" = sentiment),
sentences %>%
sentiment(lexicon::hash_sentiment_nrc) %>%
select(sentiment) %>%
rename("nrc" = sentiment),
sentences %>%
sentiment(lexicon::hash_sentiment_senticnet) %>%
select(sentiment) %>%
rename("senticnet" = sentiment),
sentences %>%
sentiment(lexicon::hash_sentiment_sentiword) %>%
select(sentiment) %>%
rename("sentiword" = sentiment),
sentences %>%
sentiment(lexicon::hash_sentiment_slangsd) %>%
select(sentiment) %>%
rename("slangsd" = sentiment),
sentences %>%
sentiment(lexicon::hash_sentiment_socal_google) %>%
select(sentiment) %>%
rename("socal_google" = sentiment))
sentiments <-  sentiments %>%
gather(key = "sentiment", value = "score") %>%
group_by(sentiment) %>%
summarise(score = mean(score)) %>%
spread(key = sentiment, value = score)
emotions <- lexicon::nrc_emotions
emotionFeatures <- sentences %>%
unnest_tokens(word, "text") %>%
filter(word %in% emotions$term) %>%
left_join(emotions, by = c("word" = "term")) %>%
select(-word,-element_id, -sentence_id) %>%
summarise_each(funs(sum)) %>%
gather(key = "sentiment", value = "score") %>%
mutate(score = score / sentences %>% unnest_tokens(word, "text") %>% nrow()) %>%
spread(sentiment, score) %>%
rename("anger.emotion" = anger,
"anticipation.emotion" = anticipation,
"digust.emotion" = disgust,
"fear.emotion" = fear,
"joy.emotion" = joy,
"sadness.emotion" = sadness,
"surprise.emotion" = surprise,
"trust.emotion" = trust)
df <- cbind(bowFeatures, bigramFeatures, trigramFeatures, sentiments, emotionFeatures)
LogisticRegressionModel <- readRDS("LogisticRegressionModel.rds")
NaiveBayesModel <- readRDS("NaiveBayesModel.rds")
L1Model <- readRDS("L1Model.rds")
L2Model <- readRDS("L2Model.rds")
ElasticNetModel <- readRDS("ElasticNetModel.rds")
MARSModel <- readRDS("MARSModel.rds")
KnnModel <- readRDS("KnnModel.rds")
RandomForestModel <- readRDS("RandomForestModel.rds")
SVMModel <- readRDS("SupportVectorMachineModel.rds")
predict(LogisticRegressionModel, df)
predict(NaiveBayesModel, df)
predict(L1Model, df)
predict(L2Model,df)
predict(ElasticNetModel, df)
predict(MARSModel, df)
predict(KnnModel, df)
predict(RandomForestModel, df)
predict(SVMModel, df)
HarryPotterHouse <- data.frame("House" = c("Gryffindor", "Hufflepuff", "Ravenclaw", "Slytherin"),
"HouseKey" = c(1,2,3,4))
HousePredictions <- rbind(predict(LogisticRegressionModel, df),
predict(NaiveBayesModel, df),
predict(L1Model, df),
predict(L2Model,df),
predict(ElasticNetModel, df),
predict(MARSModel, df),
predict(KnnModel, df),
predict(RandomForestModel, df),
predict(SVMModel, df)) %>%
as.data.frame() %>%
rename("House" = V1) %>%
group_by(House) %>%
count(House) %>%
right_join(HarryPotterHouse, by = c("House" = "HouseKey")) %>%
mutate(n = ifelse(is.na(n),0,n)) %>%
rename("HouseKey" = House, "n" = n, "House" = House.y) %>%
ungroup() %>%
select(House, n)
HousePredictions %>% ggplot(aes(x = House, y = n, fill = House )) + geom_col() + coord_polar()
HousePredictions %>% mutate(Percentage = paste(round(100*n / sum(n),2), "%", sep = ""))
HousePredictions %>%
mutate(UserName = UserName)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
