install.packages("beepr")
install.packages("ggrepel")
library(tidyverse)
library(caret)
library(doParallel)
library(beepr)
df <- readRDS("harrypotter.rds")
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
testData <- df
trainData <- upSample(df %>% select(-TargetHouse), df$TargetHouse)
testAccuracy <- function (model) {
model %>%
predict(df) %>%
cbind(df$TargetHouse) %>%
as.data.frame() %>%
rename(., "Predicted" = ., "Actual" = V2) %>%
mutate(Correct = if_else(Actual == Predicted, "Correct", "Wrong")) %>%
filter(Correct == "Correct") %>%
nrow() / nrow(df)
}
LogisticRegressionModel <- readRDS("LogisticRegressionModel.rds")
NaiveBayesModel <- readRDS("NaiveBayesModel.rds")
L1Model <- readRDS("L1Model.rds")
L2Model <- readRDS("L2Model.rds")
ElasticNetModel <- readRDS("ElasticNetModel.rds")
MARSModel <- readRDS("MARSModel.rds")
KnnModel <- readRDS("KnnModel.rds")
RandomForestModel <- readRDS("RandomForestModel.rds")
SVMModel <- readRDS("SupportVectorMachineModel.rds")
setwd("~/R work/SortingHat")
library(tidyverse)
library(caret)
library(doParallel)
library(beepr)
df <- readRDS("harrypotter.rds")
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
testData <- df
trainData <- upSample(df %>% select(-TargetHouse), df$TargetHouse)
testAccuracy <- function (model) {
model %>%
predict(df) %>%
cbind(df$TargetHouse) %>%
as.data.frame() %>%
rename(., "Predicted" = ., "Actual" = V2) %>%
mutate(Correct = if_else(Actual == Predicted, "Correct", "Wrong")) %>%
filter(Correct == "Correct") %>%
nrow() / nrow(df)
}
LogisticRegressionModel <- readRDS("LogisticRegressionModel.rds")
NaiveBayesModel <- readRDS("NaiveBayesModel.rds")
L1Model <- readRDS("L1Model.rds")
L2Model <- readRDS("L2Model.rds")
ElasticNetModel <- readRDS("ElasticNetModel.rds")
MARSModel <- readRDS("MARSModel.rds")
KnnModel <- readRDS("KnnModel.rds")
RandomForestModel <- readRDS("RandomForestModel.rds")
SVMModel <- readRDS("SupportVectorMachineModel.rds")
predict(LogisticRegressionModel, trainData, classPros = TRUE)
predict(LogisticRegressionModel, trainData, type = "prob")
predict(NaiveBayesModel, trainData, type = "prob")
predict(LogisticRegressionModel, trainData, type = "prob") %>%
cbind(predict(NaiveBayesModel, trainData, type = "prob"))
cbind(predict(LogisticRegressionModel, trainData, type = "prob"),
predict(NaiveBayesModel, trainData, type = "prob"),
predict(L1Model, trainData, type = "prob"),
predict(L2Model,trainData, type = "prob"),
predict(ElasticNetModel, trainData, type = "prob"),
predict(MARSModel, trainData, type = "prob"),
predict(KnnModel, trainData, type = "prob"),
predict(RandomForestModel, trainData, type = "prob"),
predict(SVMModel, trainData, type = "prob"),
trainData$Class)
predict(SVMModel, trainData, type = "prob")
SVMModel
ensembleTrainData <- cbind(predict(LogisticRegressionModel, trainData, type = "prob"),
predict(NaiveBayesModel, trainData, type = "prob"),
predict(L1Model, trainData, type = "prob"),
predict(L2Model,trainData, type = "prob"),
predict(ElasticNetModel, trainData, type = "prob"),
predict(MARSModel, trainData, type = "prob"),
predict(KnnModel, trainData, type = "prob"),
predict(RandomForestModel, trainData, type = "prob"),
trainData$Class)
ensembleTrainData %>% colnames()
colnames(ensembleTrainData) <- c("LogisticGryffindor","LogisticHufflepuff","LogisticRavenclaw","LogisticSlytherin",
"NaiveBayesGryffindor","NaiveBayesHufflepuff","NaiveBayesRavenclaw","NaiveBayesSlytherin",
"L1Gryffindor","L1Hufflepuff","L1Ravenclaw","L1Slytherin",
"L2Gryffindor","L2Hufflepuff","L2Ravenclaw","L2Slytherin",
"ElasticNetGryffindor","ElasticNetHufflepuff","ElasticNetRavenclaw","ElasticNetSlytherin",
"MARSGryffindor","MARSHufflepuff","MARSRavenclaw","MARSSlytherin",
"KNNGryffindor","KNNHufflepuff","KNNRavenclaw","KNNSlytherin",
"RandomForestGryffindor","RandomForestHufflepuff","RandomForestRavenclaw","RandomForestSlytherin",
"Class")
head(ensembleTrainData)
SVMModel
library(tidyverse)
library(caret)
library(doParallel)
df <- readRDS("harrypotter.rds")
df <- df %>% select(-character)
df$TargetHouse <- as.factor(df$TargetHouse)
modelData <- upSample(x = df %>% select(-TargetHouse), y = df$TargetHouse)
CenterScaleModel <- train(Class~.,
data = modelData,
method = "svmLinear",
preProc = c("center","scale"),
trControl = trainControl(classProbs = TRUE))
CenterScaleModel
CenterScaleModel %>% predict(modelData)
CenterScaleModel %>% predict(modelData, type = "prob")
saveRDS(CenterScaleModel, "SupportVectorMachineModel.rds")
SVMModel <- readRDS("SupportVectorMachineModel.rds")
SVMModel %>% predict(testData, type = "prob")
