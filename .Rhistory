View(df)
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
count(word, sort = TRUE)
View(df)
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
count(word, sort = TRUE)
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue')
#Tokenizes and counts frequency words
df %>%
select %>%
unnest_tokens(word, 'Dialogue')
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Review Text')
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue')
View(df)
library(tidyverse)
library(tidytext)
library(corpus)
df <- Womens_Clothing_E_Commerce_Reviews
df <- Womens_Clothing_E_Commerce_Reviews
df <- read.csv("Womens_Clothing_E_Commerce_Reviews.csv")
df <- read.csv("Womens_Clothing_E_Commerce_Reviews.csv")
library(tidyverse)
library(tidytext)
library(corpus)
df <- read.csv("Womens_Clothing_E_Commerce_Reviews.csv")
df <- read.csv("Womens Clothing E-Commerce Reviews.csv")
df <- df %>% rename(ID = X1) %>% select(-Title) %>% mutate(., Age = as.integer(Age))
df <- df %>% rename(ID = X) %>% select(-Title) %>% mutate(., Age = as.integer(Age))
View(df)
#Tokenizes and counts frequency words
df %>%
select(., 'Review Text') %>%
unnest_tokens(word, 'Review Text') %>%
count(word, sort = TRUE)
#Tokenizes and counts frequency words
df %>%
select(., 'Review Text') %>%
unnest_tokens(word, 'Review Text') %>%
count(word, sort = TRUE)
View(df)
#Tokenizes and counts frequency words
df %>%
select(., 'Review.Text') %>%
unnest_tokens(word, 'Review.Text') %>%
count(word, sort = TRUE)
View(df)
#Tokenizes and counts frequency words
df %>%
select(., 'Review.Text')
#Tokenizes and counts frequency words
df %>%
select(., 'Review.Text') %>%
unnest_tokens(word, 'Review.Text')
View(df)
df$Review.Text %>% str()
df$Review.Text %>% as.character()
df$Review.Text <- $Review.Text %>% as.character()
df$Review.Text <- df$Review.Text %>% as.character()
#Tokenizes and counts frequency words
df %>%
select(., 'Review.Text') %>%
unnest_tokens(word, 'Review.Text')
df <- read.csv("Harry Potter.csv")
df <- read.csv("HarryPotter.csv")
glimpse(df)
df$Dialogue <- as.character(df$Dialogue)
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
count(word, sort = TRUE)
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE)
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) + ggplot(, aes(n)) + geom_histogram()
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) + ggplot(., mapping = aes(n)) + geom_histogram()
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%  ggplot(., mapping = aes(n)) + geom_histogram()
#Tokenizes and counts frequency words
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%ggplot(., mapping = aes(n)) + geom_histogram() + scale_x_log10()
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
arrange(n)
arrange(n)
#Views low freq words (appears to be nonsense)
df %>%
select(., 'Review Text') %>%
unnest_tokens(word, 'Review Text') %>%
anti_join(stop_words) %>%
count(word) %>%
filter(n <=5) %>%
arrange(n)
#Views low freq words (appears to be nonsense)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n < 5) %>%
arrange(n)
#Views low freq words (appears to be nonsense)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n < ==1) %>%
arrange(n)
#Views low freq words (appears to be nonsense)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n < =1) %>%
arrange(n)
#Views low freq words (appears to be nonsense)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n == 1) %>%
arrange(n)
#Views low freq words (appears to be nonsense)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
#Cleaning data
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
count(word) %>%
filter(n >= 10) %>%
arrange(n)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
count(word) %>%
filter(n >= 10) %>%
arrange(n)
#Views low freq words (appears to be nonsense)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
#Cleaning data
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
count(word) %>%
filter(n < 5) %>%
arrange(n)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
count(word) %>%
filter(n < 5) %>%
arrange(n)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
mutate(word = text_tokens(word, stemmer = "en") %>% unlist()) %>% # add stemming process
count(word)
#Views low freq words (appears to be nonsense)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
#Cleaning data
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
mutate(word = text_tokens(word, stemmer = "en") %>% unlist()) %>% # add stemming process
count(word) %>%
filter(n >1)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
mutate(word = text_tokens(word, stemmer = "en") %>% unlist()) %>% # add stemming process
count(word) %>%
filter(n >1)
#Views low freq words (appears to be nonsense)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
#Cleaning data
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
mutate(word = text_tokens(word, stemmer = "en") %>% unlist()) %>% # add stemming process
count(word) %>%
filter(n >1) %>%
pull(word)
df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
mutate(word = text_tokens(word, stemmer = "en") %>% unlist()) %>% # add stemming process
count(word) %>%
filter(n >1) %>%
pull(word)
worldlist <- df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
mutate(word = text_tokens(word, stemmer = "en") %>% unlist()) %>% # add stemming process
count(word) %>%
filter(n >1) %>%
pull(word)
rm(wordlist)
rm(worldlist)
word_list <- df %>%
select(., 'Dialogue') %>%
unnest_tokens(word, 'Dialogue') %>%
anti_join(stop_words) %>%
filter(
!str_detect(word, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word, pattern = "\\b(.)\\b")    # removes any remaining single letter words
) %>%
mutate(word = text_tokens(word, stemmer = "en") %>% unlist()) %>% # add stemming process
count(word) %>%
filter(n >1) %>%
pull(word)
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(ID, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(Character, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)
View(bowFeatures)
# create new features
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(House, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)               # replace NAs with 0
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(House, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)
# create new features
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(df$House, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)               # replace NAs with 0
rm(bowFeatures)
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(House, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)
View(bowFeatures)
df_bow <- df %>%
inner_join(bow_features, by = "House") %>%   # join data sets
select(-`Dialgoue`)
df_bow <- df %>%
inner_join(bowFeatures, by = "House") %>%   # join data sets
select(-`Dialgoue`)
df_bow <- df %>%
inner_join(bowFeatures, by = "House") %>%   # join data sets
select(-`Dialogue`)
View(df_bow)
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(CHaracter, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)
bowFeatures <- df %>%
unnest_tokens(word, `Dialogue`) %>%
anti_join(stop_words) %>%
filter(word %in% word_list) %>%     # filter for only words in the wordlist
count(Character, word) %>%                 # count word useage by customer ID
spread(word, n) %>%                 # convert to wide format
map_df(replace_na, 0)               # replace NAs with 0
df_bow <- df %>%
inner_join(bowFeatures, by = "Character") %>%   # join data sets
select(-`Dialogue`)
View(bowFeatures)
df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
head()
View(bowFeatures)
ngram_list <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(
!word1 %in% stop_words$word,                 # remove stopwords from both words in bi-gram
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),   # removes any remaining single letter words
!str_detect(word1, pattern = "\\b(.)\\b")
) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
filter(n >= 10) %>% # filter for bi-grams used 10 or more times
pull(bigram)
ngram_features <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
filter(bigram %in% ngram_list) %>%    # filter for only bi-grams in the ngram_list
count(Chracter, bigram) %>%                 # count bi-gram useage by customer ID
spread(bigram, n) %>%                 # convert to wide format
map_df(replace_na, 0)
ngram_features <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
filter(bigram %in% ngram_list) %>%    # filter for only bi-grams in the ngram_list
count(Character, bigram) %>%                 # count bi-gram useage by customer ID
spread(bigram, n) %>%                 # convert to wide format
map_df(replace_na, 0)
View(ngram_features)
ngram_list <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(
!word1 %in% stop_words$word,                 # remove stopwords from both words in bi-gram
!word2 %in% stop_words$word,
!str_detect(word1, pattern = "[[:digit:]]"), # removes any words with numeric digits
!str_detect(word2, pattern = "[[:digit:]]"),
!str_detect(word1, pattern = "[[:punct:]]"), # removes any remaining punctuations
!str_detect(word2, pattern = "[[:punct:]]"),
!str_detect(word1, pattern = "(.)\\1{2,}"),  # removes any words with 3 or more repeated letters
!str_detect(word2, pattern = "(.)\\1{2,}"),
!str_detect(word1, pattern = "\\b(.)\\b"),   # removes any remaining single letter words
!str_detect(word1, pattern = "\\b(.)\\b")
) %>%
unite("bigram", c(word1, word2), sep = " ") %>%
count(bigram) %>%
filter(n >1) %>% # filter for bi-grams used 10 or more times
pull(bigram)
ngram_features <- df %>%
unnest_tokens(bigram, `Dialogue`, token = "ngrams", n = 2) %>%
filter(bigram %in% ngram_list) %>%    # filter for only bi-grams in the ngram_list
count(Character, bigram) %>%                 # count bi-gram useage by customer ID
spread(bigram, n) %>%                 # convert to wide format
map_df(replace_na, 0)
View(ngram_features)
df %>% inner_join(bowFeatures, Character)
df %>% inner_join(bowFeatures, by = Character)
df %>% inner_join(bowFeatures, by = "Character")
df %>% inner_join(bowFeatures, by = "Character") %>% inner_join(ngram_features, by = "Character")
df %>% inner_join(bowFeatures, by = "Character") %>% inner_join(ngram_features, by = "Character") %>% ncol()
View(df_bow)
View(ngram_features)
View(df_bow)
View(bowFeatures)
View(df_bow)
inner_join(df_bow, ngram_features, by = "Character")
inner_join(df_bow, ngram_features, by = "Character") %>% ncol()
cleanedDf <- inner_join(df_bow, ngram_features, by = "Character") %>% ncol()
cleanDf <- as.data.frame(CleanDf)
cleanDf <- as.data.frame(cleanDf)
cleanedDf <- as.data.frame(cleanedDf)
View(cleanedDf)
cleanedDf <- inner_join(df_bow, ngram_features, by = "Character")
cleanedDf <- as.data.frame(cleanedDf)
cleanedDf <- inner_join(df_bow, ngram_features, by = "Character")
View(cleanedDf)
View(bowFeatures)
cleanedDf <- inner_join(bowFeatures, ngram_features, by = "Character")
View(cleanedDf)
cleanedDf %>% inner_join(df %>% select(House, Character), by = "Character")
inner_join(df %>% select(House, Character), cleanedDf, by = "Character")
inner_join(df %>% select(House, Character), cleanedDf, by = "Character") %>% view()
cleanedDf %>% inner_join(df %>% select(House, Character), by = "Character")
cleanedDf %>% left_join(df %>% select(House, Character), by = "Character")
cleanedDf %>% right_join(df %>% select(House, Character), by = "Character")
cleanedDf %>% inner_join(df %>% select(House, Character) %>% unique(), by = "Character")
cleanedDf <- cleanedDf %>% inner_join(df %>% select(House, Character) %>% unique(), by = "Character")
View(cleanedDf)
cleanedDf <- inner_join(df %>% select(House, Character) %>% unique(), cleanedDf, by = "Character")
View(cleanedDf)
cleanedDf <- inner_join(bowFeatures, ngram_features, by = "Character")
cleanedDf <- inner_join(df %>% select(House, Character) %>% unique(), cleanedDf, by = "Character")
View(cleanedDf)
View(cleanedDf)
View(cleanedDf)
View(df_bow)
