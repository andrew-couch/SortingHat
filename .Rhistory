harrypotter$character <- NULL
upTrain <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
summaryFunction = "multiClassSummary",
sampling = "up")
test <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
trConrol = downTrain,
metric = "logLoss",
maximize = FALSE)
library(caret)
library(tidyverse)
library(doParallel)
cl <- makePSOCKcluster(8)
registerDoParallel(cl)
harrypotter <- readRDS("harrypotter.rds")
harrypotter$TargetHouse <- as.factor(harrypotter$TargetHouse)
harrypotter$character <- NULL
upTrain <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
summaryFunction = "multiClassSummary",
sampling = "up")
test <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
trConrol = upTrain,
metric = "logLoss",
maximize = FALSE)
stopCluster(cl)
test %>% confusionMatrix()
source('E:/School/R Work/SortingHat/Sorting Hat Model.R', echo=TRUE)
test$modelInfo
multiClassSummary(harrypotter, lev = levels(harrypotter$TargetHouse), test)
multiClassSummary(test, lev = levels(harrypotter$TargetHouse))
multiClassSummary(harrypotter, lev = levels(harrypotter$TargetHouse))
multiClassSummary(harrypotter, lev = levels(harrypotter$TargetHouse), test)
?multiClassSummary
multiClassSummary(lev = levels(harrypotter$TargetHouse), model = test, pred = test$pred, obs = harrypotter$TargetHouse)
multiClassSummary(lev = levels(harrypotter$TargetHouse), model = test, pred = test$pred, obs = harrypotter$TargetHouse)
multiClassSummary(lev = levels(harrypotter$TargetHouse), model = test)
multiClassSummary(lev = levels(harrypotter$TargetHouse), model = test, data = harrypotter)
multiClassSummary(lev = levels(harrypotter$TargetHouse), model = test$finalModel, data = harrypotter)
multiClassSummary(lev = levels(harrypotter$TargetHouse), model = test$pred, data = harrypotter)
df <- harrypotter$TargetHouse %>% cbind(predict(test,harrypotter))
df <- harrypotter$TargetHouse %>% cbind(predict(test,harrypotter)) %>% as.data.frame()
View(df)
multiClassSummary(df, lev = levels((df$.)
multiClassSummary(df, lev = levels((df$.))
multiClassSummary(df, lev = levels(df$.))
multiClassSummary(df, lev = levels(df$.), test)
library(caret)
library(tidyverse)
library(doParallel)
cl <- makePSOCKcluster(8)
registerDoParallel(cl)
harrypotter <- readRDS("harrypotter.rds")
harrypotter$TargetHouse <- as.factor(harrypotter$TargetHouse)
harrypotter$character <- NULL
train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = preProcess(harrypotter, method = c("BoxCox","nzv","corr")),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = preProcess(harrypotter, method = c("BoxCox","nzv","corr")),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = preProcess(harrypotter, method = c("nzv","corr")),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = preProcess(harrypotter, method = c("corr")),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = preProcess(harrypotter, method = c("BoxCox")),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProcess = preProcess(harrypotter,
method = c("BoxCox")),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProcess(harrypotter,method = c("BoxCox")),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "corr","nzv"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "corr"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "corr"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = mnLogLoss),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = mnLogLoss),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "mnLogLoss"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose",
summaryFunction = "multiClassSummary"),
metric = "logLoss")
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose"))
library(caret)
library(tidyverse)
library(doParallel)
cl <- makePSOCKcluster(8)
registerDoParallel(cl)
harrypotter <- readRDS("harrypotter.rds")
harrypotter$TargetHouse <- as.factor(harrypotter$TargetHouse)
harrypotter$character <- NULL
model <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "up"))
stopCluster(cl)
mode()
model
model %>% confusionMatrix()
model$pred
model$metric
model$results
model$resample
model$resample %>% plot()
model %>% plot()
predict(preProcess(harrypotter, method = "pca"), harrypotter)
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>% ggplot(aes(x = PC1, y = PC2, color = TargetHouse)) + geom_point()
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>% gather()
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>% gather(TargetHouse)
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>% gather(-TargetHouse)
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>% gather(key = "PCA", value = "value", -TagetHouse)
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>% gather(key = "PCA", value = "value", -TargetHouse)
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>%
gather(key = "PCA", value = "value", -TargetHouse) %>%
ggplot(aes(x = PCA, y = value, color = TargetHouse)) + geom_point() + facet_grid(~PCA)
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>%
gather(key = "PCA", value = "value", -TargetHouse) %>%
ggplot(aes(x = PCA, y = value, color = TargetHouse)) +
geom_point() +
facet_grid(PCA ~ PCA)
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>%
gather(key = "PCA", value = "value", -TargetHouse) %>%
ggplot(aes(x = PCA, y = value, color = TargetHouse)) +
geom_point() +
facet_grid(PCA ~ PCA)
predict(preProcess(harrypotter, method = "pca"), harrypotter) %>% GGally::ggpairs(aes(color = TargetHouse))
predict(preProcess(harrypotter, method = "pca"), harrypotter)
PCA <- predict(preProcess(harrypotter, method = "pca"), harrypotter)
PCA[,1:11]
PCA[,1:11] %>% GGally::ggpairs(aes(color = TargetHouse))
SMOTEmodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "smote"))
SMOTEmodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "smote"))
SMOTEmodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "SMOTE"))
SMOTEmodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "smote"))
install.packages("DMwR ")
install.packages("DMwR")
SMOTEmodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "smote"))
stopCluster(cl)
cl <- makePSOCKcluster(7)
SMOTEmodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "smote"))
stopCluster(cl)
library(caret)
library(tidyverse)
library(doParallel)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
harrypotter <- readRDS("harrypotter.rds")
harrypotter$TargetHouse <- as.factor(harrypotter$TargetHouse)
harrypotter$character <- NULL
upmodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "up"))
downmodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "down"))
SMOTEmodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "smote"))
Rosemodel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox", "pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose"))
stopCluster(cl)
PCAHarryPotter <- predict(preProcess(harrypotter, method = c("pca","BoxCox")))
PCAHarryPotter <- predict(preProcess(harrypotter, method = c("pca","BoxCox")), harrypotter)
View(PCAHarryPotter)
Rosemodel <- train(TargetHouse~.,
data = PCAHarryPotter,
method = "rf",
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose"))
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
Rosemodel <- train(TargetHouse~.,
data = PCAHarryPotter,
method = "rf",
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose"))
View(PCAHarryPotter)
Rosemodel <- train(TargetHouse~.,
data = PCAHarryPotter,
method = "rf")
Rosemodel
Rosemodel <- train(TargetHouse~.,
data = PCAHarryPotter,
method = "rf",
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "rose"))
Rosemodel <- train(TargetHouse~.,
data = PCAHarryPotter,
method = "rf",
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10,
sampling = "up"))
harrypotter <- readRDS("harrypotter.rds")
harrypotter$TargetHouse <- as.factor(harrypotter$TargetHouse)
harrypotter$character <- NULL
upSample(harrypotter[,2:1591],harrypotter$TargetHouse)
hpUp <- upSample(harrypotter[,2:1591],harrypotter$TargetHouse)
hpDown <- downSample(harrypotter[,2:1591],harrypotter$TargetHouse)
?ROSE
library(ROSE)
ROSE(TargetHouse~., data = harrypotter)
ROSE(TargetHouse~., data = harrypotter, p = 1)
ROSE(TargetHouse~., data = harrypotter, p=.5)
ROSE(TargetHouse~., data = harrypotter, p=.5)$data
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
upModel <- train(TargetHouse~.,
data = hpUp,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
downModel <- train(TargetHouse~.,
data = hpDown,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
upModel <- train(Class~.,
data = hpUp,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
downModel <- train(Class~.,
data = hpDown,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
upModel
upModel %>% plot()
upModel %>% confusionMatrix()
View(hpDown)
downModel <- train(Class~.,
data = hpDown,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
downModel <- train(Class~.,
data = hpDown,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
hpDown$Class
downModel <- train(Class~.,
data = hpDown,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
hpDown <- downSample(harrypotter[,2:1591],harrypotter$TargetHouse)
stopCluster(cl)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
downModel <- train(Class~.,
data = hpDown,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
upModel
upModel %>% varImp()
stopCluster(cl)
predict(upModel, harrypotter)
predict(upModel, harrypotter) %>% cbind(harrypotter$TargetHouse)
predict(upModel, harrypotter) %>% cbind(harrypotter$TargetHouse) %>% plot()
library(caret)
library(tidyverse)
library(doParallel)
library(ROSE)
harrypotter <- readRDS("harrypotter.rds")
harrypotter$TargetHouse <- as.factor(harrypotter$TargetHouse)
harrypotter$character <- NULL
hpUp <- upSample(harrypotter[,2:1591],harrypotter$TargetHouse)
hpDown <- downSample(harrypotter[,2:1591],harrypotter$TargetHouse)
cl <- makePSOCKcluster(7)
registerDoParallel(cl)
upModel <- train(Class~.,
data = hpUp,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
downModel <- train(Class~.,
data = hpDown,
method = "rf",
preProc = c("BoxCox","pca"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
regularModel <- train(TargetHouse~.,
data = harrypotter,
method = "rf",
preProc = c("BoxCox"),
trControl = trainControl(method = "repeatedcv",
repeats = 10,
number = 10))
stopCluster(cl)
regularModel
upModel
upModel %>% plot()
saveRDS(upModel, "upModel.rds")
