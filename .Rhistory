harrypotter <- harrypotter %>% rbind(harrypotter::order_of_the_phoenix)
harrypotter <- harrypotter %>% rbind(harrypotter::philosophers_stone)
harrypotter <- harrypotter %>% rbind(harrypotter::prisoner_of_azkaban)
harrypotter <- as.data.frame(harrypotter)
View(harrypotter)
harrypotter <- harrypotter::chamber_of_secrets
harrypotter <- as.data.frame(harrypotter)
View(harrypotter)
harrypotter <- harrypotter %>% rbind(harrypotter::deathly_hallows)
harrypotter <- harrypotter %>% rbind(harrypotter::deathly_hallows)
View(harrypotter)
harrypotter::chamber_of_secrets
titles <- c("Philosopher's Stone", "Chamber of Secrets", "Prisoner of Azkaban",
"Goblet of Fire", "Order of the Phoenix", "Half-Blood Prince",
"Deathly Hallows")
books <- list(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban,
goblet_of_fire, order_of_the_phoenix, half_blood_prince,
deathly_hallows)
books
library(tidyverse)
library(tidytext)
library(harrypotter)
df <- philosophers_stone
df <- as.data.frame(df)
df$book <- "philosophers_stone"
View(df)
df$chapter <- seq.int(nrow(df))
View(df)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ")
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said" | word2 == "said")
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said" | word2 == "said") %>% unique()
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said" | word2 == "said") %>% unique()
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said" | word2 == "said") %>% unique() %>% arrange(word1)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said" | word2 == "said") %>% arrange(word1) %>% unique(word1, word2)
filter(word1 == "said" | word2 == "said") %>% arrange(word1) %>% unique(word1_
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said" | word2 == "said") %>% arrange(word1) %>% unique(word1)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said" | word2 == "said") %>% arrange(word1)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said" | word2 == "said") %>%
select(word1, word2) %>%
arrange() %>%
unique()
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said" | word2 == "said") %>%
select(word1, word2) %>%
arrange(word1) %>%
unique()
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said") %>%
select(word1, word2) %>%
unique() %>%
arrange(word1)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said") %>%
select(word1, word2) %>%
unique() %>%
arrange(word2)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said") %>%
select(word1, word2) %>%
unique() %>%
arrange(word2)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
arrange()
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
arrange(word2)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ")
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>% select(word1, word2)
bigram <- df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2)
bigram %>%
filter(word1 == "said")
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
arrange()
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
arrange(word2)
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>%
select(word1)) %>% arrange()
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>%
select(word1))
select(word1)
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>%
select(word1))
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>% select(word1))
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>% select(word1))
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>% select(word1) %>% unique())
rbind(bigram %>%
filter(word2 == "said") %>% select(word1) %>% unique())
rbind(bigram %>% filter(word2 == "said") %>% select(word1) %>% unique(),
bigram %>% filter(word1 == "said") %>% select(word2) %>% unique())
rbind(bigram %>% filter(word2 == "said") %>% select(word1) %>% unique(),
bigram %>% filter(word1 == "said") %>% select(word2) %>% unique())
rbind(bigram %>% filter(word2 == "said") %>% select(word1)
rbind(bigram %>% filter(word2 == "said") %>% select(word1),
bigram %>% filter(word1 == "said") %>% select(word2))
rbind(bigram %>% filter(word2 == "said") %>% select(word1),
bigram %>% filter(word1 == "said") %>% select(word2))
rbind(bigram %>% filter(word2 == "said") %>% select(word1),
bigram %>% filter(word1 == "said") %>% select(word2))
rbind(bigram %>% filter(word2 == "said") %>% select(word1),
bigram %>% filter(word1 == "said") %>% select(word2))
bigram %>% filter(word1 == "said" | word2 == "said")
bigram %>%
filter(word1 == "said" | word2 == "said") %>% rbind(word1, word2)
bigram %>%
filter(word1 == "said" | word2 == "said") %>% unique(word1, word2)
bigram %>%
filter(word1 == "said" | word2 == "said") %>% unique(word1, word2)
bigram %>%
filter(word1 == "said" | word2 == "said") %>% unique()
bigram %>%
filter(word1 == "said" | word2 == "said") %>% unique() %>% gather()
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
unique() %>%
gather() %>%
select(value)
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
unique() %>%
gather() %>%
select(value) %>%
unique()
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique()
bigram %>%
filter(word1 == "said" | word2 == "said")
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
gather()
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange()
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
df %>% rbind(goblet_of_fire)
df <- df %>% rbind(goblet_of_fire)
rbind(df, goblet_of_fire)
df <- rbind(df, goblet_of_fire)
View(df)
df <- philosophers_stone
df <- as.data.frame(df)
goblet_of_fire <- goblet_of_fire
goblet_of_fire <- as.data.frame(goblet_of_fire)
View(goblet_of_fire)
df <- df %>% rbind(goblet_of_fire)
df <-  rbind(df,goblet_of_fire)
View(goblet_of_fire)
View(df)
df <- philosophers_stone
df <- philosophers_stone %>% as.data.frame()
df <- philosophers_stone %>% as.data.frame()
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
View(df)
View(df)
df %>%
unnest_tokens(bigram, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
colnames(df) <- "text"
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
df <- goblet_of_fire %>% as.data.frame()
colnames(df) <- "text"
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
library(rattle)
rattle()
library(rattle)
rattle()
library(tidyverse)
setwd("E:/School/R Work/SortingHat")
df <- read.csv("fulldialogue.csv")
df
names <- read.csv("namelist.csv")
saidverbs <- read.csv("wordList.csv")
saidverbs
library(tidytext)
library(sentimentr)
df <- read.csv("fulldialogue.csv")
names <- read.csv("namelist.csv")
saidverbs <- read.csv("wordList.csv")
df %>%
get_sentences() %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ")
library(tidyverse)
library(tidytext)
library(sentimentr)
df <- read.csv("fulldialogue.csv")
names <- read.csv("namelist.csv")
saidverbs <- read.csv("wordList.csv")
df %>%
get_sentences() %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ")
View(df)
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ")
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% names & word2 %in% saidverbs)
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% names && word2 %in% saidverbs)
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% names)
View(df)
df$sentence_id
df$sentence_id %>% rbind(df$sentence_id +1, df$sentence_id - 1)
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% saidverbs| word2 %in% saidverbs)
library(tidyverse)
library(tidytext)
library(harrypotter)
library(sentimentr)
philosophers_stone <- philosophers_stone %>% as.data.frame()
chamber_of_secrets <- chamber_of_secrets %>% as.data.frame()
prisoner_of_azkaban <- prisoner_of_azkaban %>% as.data.frame()
goblet_of_fire <- goblet_of_fire %>% as.data.frame()
order_of_the_phoenix <- order_of_the_phoenix %>% as.data.frame()
half_blood_prince <- half_blood_prince %>% as.data.frame()
deathly_hallows <- deathly_hallows %>% as.data.frame()
philosophers_stone$book <- "philosophers_stone"
chamber_of_secrets$book <- "chamber_of_secrets"
prisoner_of_azkaban$book <- "prisoner_of_azkaban"
goblet_of_fire$book <- "goblet_of_fire"
order_of_the_phoenix$book <- "order_of_the_phoenix"
half_blood_prince$book <- "half_blood_prince"
deathly_hallows$book <- "deathly_hallows"
df <- rbind(philosophers_stone, chamber_of_secrets, prisoner_of_azkaban, goblet_of_fire, order_of_the_phoenix, half_blood_prince, deathly_hallows)
colnames(df) <- c("text", "book")
#Finds said synonyms for Harry
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "harry" | word2 == "harry") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
filter(substr(value, start = nchar(value), stop = nchar(value)) == "d")
#dialogueVerbs is the entire list of said synonyms used to find characters in the books
dialogueVerbs <- c("accused", "agreed", "announced", "answered", "argued", "assured","begged","blurted","called","challenged","cheered","confessed","convinced","cried","decided","echoed","explained","fretted","gasped","guessed","hissed","imitated","informed","interjected","interrupted","japped","persuaded","promised","prompted","protested","read","replied","responded","retold","roared","scowled","screamed","screeched","shared","shouted","shurgged","snarled","sniggered","snorted","squeled","squeaked","stammered","said","told","voiced","wailed","whimpered","whispered","worried","yawned","yelled","yelped")
dialogueVerbs <- as.data.frame(dialogueVerbs)
#Finds said synonyms for Ron
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "ron" | word2 == "ron") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
filter(substr(value, start = nchar(value), stop = nchar(value)) == "d") %>%
select(value) %>%
anti_join(dialogueVerbs, by = c("value" = "dialogueVerbs"))
#Uses holder to add synonyms to a dataframe
addedWords <- c("added","breathed","barked","breathed","chortled","demanded","exchanged","exclaimed","intervened","moaned","mumbled","offered","retorted","shocked","sighed","sneered","spluttered","suggested") %>% as.data.frame()
colnames(addedWords) <- "dialogueVerbs"
dialogueVerbs <-  rbind(dialogueVerbs, addedWords)
#Finds said synonyms for Hermione
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "hermione" | word2 == "hermione") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
filter(substr(value, start = nchar(value), stop = nchar(value)) == "d") %>%
select(value) %>%
anti_join(dialogueVerbs, by = c("value" = "dialogueVerbs"))
addedWords <- c("added","bemused","bickered","choked","cooed","elaborated","giggled","groaned","jeered","laughed","mentioned","murmured","muttered","reminded","scoffed","shrieked","squealed","talked","warned","winced") %>% as.data.frame()
colnames(addedWords) <- "dialogueVerbs"
dialogueVerbs <-  rbind(dialogueVerbs, addedWords)
#Finds said synonyms for Malfoy
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "malfoy" | word2 == "malfoy") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
filter(substr(value, start = nchar(value), stop = nchar(value)) == "d") %>%
select(value) %>%
anti_join(dialogueVerbs, by = c("value" = "dialogueVerbs"))
addedWords <- c("bawled","bellowed","chuckled","howled","mouthed") %>% as.data.frame()
colnames(addedWords) <- "dialogueVerbs"
dialogueVerbs <- rbind(dialogueVerbs, addedWords)
#Finds characters by using bigrams, if word has said than it could be harry said or said harry
firstNameLexicon <- lexicon::freq_first_names
firstNameLexicon <- firstNameLexicon %>% select(Name)
firstNameLexicon <-  sapply(firstNameLexicon, tolower) %>% as.data.frame()
colnames(firstNameLexicon) <- "names"
#uses freq_first_names lexicon to find names in harry potter
#many names missing but still is worth doing
nameList <- df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs | word2 %in% dialogueVerbs$dialogueVerbs) %>%
gather() %>%
select(value) %>%
unique() %>%
filter(!value %in% dialogueVerbs$dialogueVerbs) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
arrange(value) %>%
filter(value %in% firstNameLexicon$names)
#filters out old names
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 %in% dialogueVerbs$dialogueVerbs | word2 %in% dialogueVerbs$dialogueVerbs) %>%
gather() %>%
select(value) %>%
unique() %>%
filter(!value %in% dialogueVerbs$dialogueVerbs) %>%
anti_join(stop_words, by = c("value" = "word")) %>%
arrange(value) %>%
anti_join(nameList, by = c("value" = "value")) %>%
view()
#Manually finding names (first and last that were missed)
#Didn't use freq_last name lexicon because potential overalp with regular words
newNames <- c("cho","crabbe","dobby","dolhov","draco","dully","dumbledore","dursley","finnigan","firenze","fleur","flitwick","goyle","granger","gregorovitch","grindelvald","gridenlwald","hargrid","harry","harper","hermione","igro","jones","jorkins","karakoff","kingsley","kirke","kreacher","krum","lovegood","lucius","lupin","macmillan","macnair","malfoy","malkin","mcgonagall","mclaggen","mcmillan","nagini","ninny","nox","nymphadora","o'flaherty","olivander","padma","parkinson","parvati","phineas","pomona","potter","professor","riddle","roberts","romilda","romulus","ronan","rookwood","scropious","seamus","sirius","snape","snivellus","snivelus","tonks","tosh","trelawney","umbridge","uncle","voldemort","warrington","weasley","weaseleys","wormtail","") %>% as.data.frame()
colnames(newNames) <- "value"
nameList <- rbind(nameList,newNames) %>% arrange()
#uses nameList and dialogueVerbs to find sentences in books
#finds the index (book, chapter, and sentence) where dialogue verb and name are in bigram
sentences <- df %>%
get_sentences() %>%
unnest_tokens(bigram, `text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter((word1 %in% dialogueVerbs$dialogueVerbs & word2 %in% nameList$value) | (word1 %in% dialogueVerbs$dialogueVerbs & word2 %in%    nameList$value)) %>%
select(-word1, -word2) %>%
unique() %>%
arrange(book, element_id, sentence_id)
#uses index to select text that has dialogue verb and name combination
text <- df %>%
get_sentences() %>%
inner_join(sentences, by = c("book" = "book", "element_id" = "element_id", "sentence_id" = "sentence_id"))
quotes <- df %>%
get_sentences() %>%
filter(str_detect(text, '\"') == TRUE)
fulldialogue <- rbind(text, quotes)
fulldialogue <-  fulldialogue %>% unique()
fulldialogue <-  fulldialogue %>% arrange(book, element_id, sentence_id)
text
text %>% view()
quotes
quotes$text
text
text$text
quotes
quotes %>% view()
test %>% view()
text %>% view()
quotes %>% view()
text %>% view()
View(quotes)
View(text)
inner_join(quotes, text, by = c("book" = "book", "element_id" = "element_id","sentence_id" = "sentence_id"))
sharedText <- inner_join(quotes, text, by = c("book" = "book", "element_id" = "element_id","sentence_id" = "sentence_id"))
View(sharedText)
