separate(bigram, c("word1", "word2"), sep = " ") %>% select(word1, word2)
bigram <- df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2)
bigram %>%
filter(word1 == "said")
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
arrange()
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
arrange(word2)
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>%
select(word1)) %>% arrange()
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>%
select(word1))
select(word1)
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>%
select(word1))
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>% select(word1))
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>% select(word1))
bigram %>%
filter(word1 == "said") %>%
select(word2) %>%
unique() %>%
rbind(bigram %>%
filter(word2 == "said") %>% select(word1) %>% unique())
rbind(bigram %>%
filter(word2 == "said") %>% select(word1) %>% unique())
rbind(bigram %>% filter(word2 == "said") %>% select(word1) %>% unique(),
bigram %>% filter(word1 == "said") %>% select(word2) %>% unique())
rbind(bigram %>% filter(word2 == "said") %>% select(word1) %>% unique(),
bigram %>% filter(word1 == "said") %>% select(word2) %>% unique())
rbind(bigram %>% filter(word2 == "said") %>% select(word1)
rbind(bigram %>% filter(word2 == "said") %>% select(word1),
bigram %>% filter(word1 == "said") %>% select(word2))
rbind(bigram %>% filter(word2 == "said") %>% select(word1),
bigram %>% filter(word1 == "said") %>% select(word2))
rbind(bigram %>% filter(word2 == "said") %>% select(word1),
bigram %>% filter(word1 == "said") %>% select(word2))
rbind(bigram %>% filter(word2 == "said") %>% select(word1),
bigram %>% filter(word1 == "said") %>% select(word2))
bigram %>% filter(word1 == "said" | word2 == "said")
bigram %>%
filter(word1 == "said" | word2 == "said") %>% rbind(word1, word2)
bigram %>%
filter(word1 == "said" | word2 == "said") %>% unique(word1, word2)
bigram %>%
filter(word1 == "said" | word2 == "said") %>% unique(word1, word2)
bigram %>%
filter(word1 == "said" | word2 == "said") %>% unique()
bigram %>%
filter(word1 == "said" | word2 == "said") %>% unique() %>% gather()
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
unique() %>%
gather() %>%
select(value)
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
unique() %>%
gather() %>%
select(value) %>%
unique()
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique()
bigram %>%
filter(word1 == "said" | word2 == "said")
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
gather()
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange()
bigram %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
df %>% rbind(goblet_of_fire)
df <- df %>% rbind(goblet_of_fire)
rbind(df, goblet_of_fire)
df <- rbind(df, goblet_of_fire)
View(df)
df <- philosophers_stone
df <- as.data.frame(df)
goblet_of_fire <- goblet_of_fire
goblet_of_fire <- as.data.frame(goblet_of_fire)
View(goblet_of_fire)
df <- df %>% rbind(goblet_of_fire)
df <-  rbind(df,goblet_of_fire)
View(goblet_of_fire)
View(df)
df <- philosophers_stone
df <- philosophers_stone %>% as.data.frame()
df <- philosophers_stone %>% as.data.frame()
df %>%
unnest_tokens(bigram, `df`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
View(df)
View(df)
df %>%
unnest_tokens(bigram, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
colnames(df) <- "text"
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
df <- goblet_of_fire %>% as.data.frame()
colnames(df) <- "text"
df %>%
unnest_tokens(bigram,`text`, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
select(word1, word2) %>%
filter(word1 == "said" | word2 == "said") %>%
gather() %>%
select(value) %>%
unique() %>%
arrange(value)
library(rattle)
rattle()
library(rattle)
rattle()
library(tidyverse)
library(tidyverse)
df <- data.frame(house = c("g", "s", "h", "r"), values = (.5,.1,.1,.3))
df <- data.frame(house = c("g", "s", "h", "r"), values = (.5,.1,.1,.3))
df <- data.frame("house" = c("g", "s", "h", "r"), "values" = (.5,.1,.1,.3))
df <- data.frame("house" = c("g", "s", "h", "r"),
"values" = c(.5,.1,.1,.3))
ggplot(data = df, mapping = aes(x = house, y = values)) + geom_bar()
ggplot(data = df, mapping = aes(x = house, y = values)) + geom_col()
ggplot(data = df, mapping = aes(x = house, y = values)) + geom_col() + coord_polar()
ggplot(data = df, mapping = aes(x = house, y = values, color = house)) + geom_col() + coord_polar()
ggplot(data = df, mapping = aes(x = house, y = values, color = house, fill = house)) + geom_col() + coord_polar()
ggplot(data = df, mapping = aes(x = house, y = values, color = house, fill = house)) + geom_line() + coord_polar()
ggplot(data = df, mapping = aes(x = house, y = values, color = house, fill = house, group = house)) + geom_line() + coord_polar()
ggplot(data = df, mapping = aes(x = house, y = values, color = house, fill = house)) + geom_line() + coord_polar()
ggplot(data = df, mapping = aes(x = house, y = values, color = house, fill = house)) + geom_col() + coord_polar()
ggplot(data = df, mapping = aes(x = house, y = values, color = house, fill = house)) + geom_col() + coord_polar(theta = "y")
ggplot(data = df, mapping = aes(x = house, y = values, color = house, fill = house)) + geom_col() + coord_polar(theta = "x")
ggplot(data = df, mapping = aes(x = house, y = values, color = house, fill = house)) + geom_col(width = 1) + coord_polar(theta = "x")
install.packages("ggradar")
library(tidyverse)
df <- data.frame("house" = c("g", "s", "h", "r"),
"values" = c(.5,.1,.1,.3))
ggplot(data = df, mapping = aes(x = house, y = values, color = house, fill = house)) + geom_col(width = 1) + coord_polar(theta = "x")
library(rattle)
rattle()
library(rattle)
rattle()
library(rattle)
rattle()
library(rattle)
rattle()
library(tidyverse)
library(tidytext)
df <- read.csv("Debate3.csv")
df %>% unnest_tokens(words, "text")
View(df)
df %>% unnest_tokens(words, "Text")
df %>% unnest_tokens(word, "Text")
df %>% unnest_tokens(word, "Text")
df %>% str()
df$Text <- as.character(df$Text)
df %>% unnest_tokens(word, "Text")
df %>% unnest_tokens(word, "Text") %>% group_by(Character) %>% count(word, sort = TRUE)
df %>% unnest_tokens(word, "Text") %>%
bind_tf_idf(word, chracter, n)
df %>% unnest_tokens(word, "Text") %>%
count(word) %>%
bind_tf_idf(word, chracter, n)
df %>% unnest_tokens(word, "Text") %>%
count(word) %>%
bind_tf_idf(word, chracter, n)
df %>% unnest_tokens(word, "Text") %>%
count(word) %>%
bind_tf_idf(character, word, n)
df %>% unnest_tokens(word, "Text") %>%
count(word)
df %>% unnest_tokens(word, "Text") %>%
count(word, Character)
df %>% unnest_tokens(word, "Text") %>%
count(word, Character) %>%
bind_tf_idf(word, character, n)
df %>% unnest_tokens(word, "Text") %>%
count(word) %>%
bind_tf_idf(word, character, n)
df %>% unnest_tokens(word, "Text") %>%
count(word) %>%
bind_tf_idf(word, character, n)
df %>% unnest_tokens(word, "Text") %>%
bind_tf_idf(word, character, n)
df %>% unnest_tokens(word, "Text") %>%
count(word, word) %>%
bind_tf_idf(word, character, n)
df %>% unnest_tokens(word, "Text") %>%
count(word, word) %>%
bind_tf_idf(word, character, n)
df %>% unnest_tokens(word, "Text") %>%
count(word, word)
df %>% unnest_tokens(word, "Text") %>%
count(word, word) %>%
bind_tf_idf(word, character, n)
df$Debate <- "Debate"
df %>% unnest_tokens(Text)
df %>% unnest_tokens(word, "Text")
df %>%
unnest_tokens(word, "Text") %>%
count(Debate, word)
df %>%
unnest_tokens(word, "Text") %>%
count(Debate, word) %>%
bind_tf_idf(word, character, n)
df %>%
unnest_tokens(word, "Text") %>%
count(Debate, word) %>%
bind_tf_idf(word, character, n)
df %>%
unnest_tokens(word, "Text") %>%
count(word, character) %>%
bind_tf_idf(word, character, n)
df %>%
unnest_tokens(word, "Text") %>%
count(word, character) %>%
bind_tf_idf(word, character, n)
View(df)
df %>%
unnest_tokens(word, "Text") %>%
count(word, Character) %>%
bind_tf_idf(word, Character, n)
df %>%
unnest_tokens(word, "Text") %>%
count(word, Character) %>%
bind_tf_idf(word, Character, n) %>%
group_by(Character) %>%
top_n(tf_idf, n = 5)
10^(seq(-3,3,length = 5))
options(scipen = 999)
10^(seq(-3,3,length = 5))
10^(seq(-3,3,length = 10))
seq(-3,3,length = 1)
seq(-3,3,length = 100)
seq(0,1,length.out = 10)
1/seq(1,10000,length = 100)
1/seq(2,10000,length = 10000)
1/seq(2,10000,length = 1000)
1/seq(2,10000,length = 100)
1/seq(1,10000,length = 100)
seq(1,0,length.out = 10000)
seq(1,0,length.out = 1000)
seq(.999999,.0000001,length.out = 1000)
seq(.99999,.0000001,length.out = 1000)
seq(.99999,.00001,length.out = 1000)
10^seq(-3,3, length = 100)
library(tidyverse)
library(caret)
library(doParallel)
alarm()
library(tidyverse)
install.packages("dplyr")
library(tidyverse)
install.packages(c("assertthat", "backports", "boot", "broom", "cairoDevice", "clipr", "cluster", "colorspace", "covr", "curl", "data.table", "dbplyr", "digest", "english", "evaluate", "forcats", "foreign", "ggplot2", "ggthemes", "glue", "gtable", "harrypotter", "haven", "highr", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "KernSmooth", "knitr", "later", "lazyeval", "markdown", "MASS", "Matrix", "mgcv", "mgsub", "mime", "modelr", "nlme", "openssl", "pillar", "pkgbuild", "pkgconfig", "pROC", "progress", "promises", "purrr", "R6", "RcppParallel", "readxl", "recipes", "reprex", "rmarkdown", "rpart", "rstudioapi", "rvest", "RWeka", "RWekajars", "shiny", "slam", "stringi", "stringr", "survival", "sys", "tibble", "tidyr", "tinytex", "whisker", "xfun", "xml2", "zip"))
library(tidyverse)
library(caret)
install.packages("nnet")
library(caret)
irirs
iris
df <- iris
modelTest <- train(Species~., data = df, method = "knn")
modelTest <- train(Species~., data = df, method = "multinom")
modelTest
alarm()
alarm()
?alarm
browseURL('https://www.youtube.com/watch?v=QH2-TGUlwu4')
library(caret)
iris
iris
testModel <- train(Species~., data = iris, method = "glm")
testModel <- train(Species~., data = iris, method = "bayesglm")
testMo
testModel
setwd("E:/School/R Work")
library(tidyverse)
library(caret)
df <- readRDS("harrypotter.rds")
LogisticRegressionModel <- readRDS("LogisticRegressionModel.rds")
NaiveBayesModel <- readRDS("NaiveBayesModel.rds")
L1Model <- readRDS("L1Model.rds")
L2Model <- readRDS("L2Model.rds")
ElasticNetModel <- readRDS("ElasticNetModel.rds")
MARSModel <- readRDS("MARSModel.rds")
KnnModel <- readRDS("KnnModel.rds")
RandomForestModel <- readRDS("RandomForestModel.rds")
SVMModel <- readRDS("SupportVectorMachineModel.rds")
setwd("E:/School/R Work/SortingHat")
df <- readRDS("harrypotter.rds")
LogisticRegressionModel <- readRDS("LogisticRegressionModel.rds")
NaiveBayesModel <- readRDS("NaiveBayesModel.rds")
L1Model <- readRDS("L1Model.rds")
L2Model <- readRDS("L2Model.rds")
ElasticNetModel <- readRDS("ElasticNetModel.rds")
MARSModel <- readRDS("MARSModel.rds")
KnnModel <- readRDS("KnnModel.rds")
RandomForestModel <- readRDS("RandomForestModel.rds")
SVMModel <- readRDS("SupportVectorMachineModel.rds")
testData <- df
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
testData <- df
trainData <- upSample(df %>% select(-TargetHouse), df$TargetHouse)
df <- readRDS("harrypotter.rds")
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
testData <- df
trainData <- upSample(df %>% select(-TargetHouse), df$TargetHouse)
results <- cbind(predict(LogisticRegressionModel, trainData),
predict(NaiveBayesModel, trainData),
predict(L1Model, trainData),
predict(L2Model,trainData),
predict(ElasticNetModel, trainData),
predict(MARSModel, trainData),
predict(KnnModel, trainData),
predict(RandomForestModel, trainData),
predict(SVMModel, trainData), df$TargetHouse) %>%
as.data.frame()
results <- cbind(predict(LogisticRegressionModel, trainData),
predict(NaiveBayesModel, trainData),
predict(L1Model, trainData),
predict(L2Model,trainData),
predict(ElasticNetModel, trainData),
predict(MARSModel, trainData),
predict(KnnModel, trainData),
predict(RandomForestModel, trainData),
predict(SVMModel, trainData), trainData$Class) %>%
as.data.frame()
colnames(results) <- c("Logistic","NaiveBayes","L1","L2","ElasticNet","MARS","Knn","RandomForest","SVM", "Actual")
results
results$Actual
results$Actual %>%
count(Acutal)
ensembleTrain <- cbind(predict(LogisticRegressionModel, trainData),
predict(NaiveBayesModel, trainData),
predict(L1Model, trainData),
predict(L2Model,trainData),
predict(ElasticNetModel, trainData),
predict(MARSModel, trainData),
predict(KnnModel, trainData),
predict(RandomForestModel, trainData),
predict(SVMModel, trainData), trainData$Class) %>%
as.data.frame()
colnames(ensembleTrain) <- c("Logistic","NaiveBayes","L1","L2","ElasticNet","MARS","Knn","RandomForest","SVM", "Actual")
ensembleTrain$Actual <- as.factor(ensembleTrain$Actual)
ensembleModel <- train(Actual~., data = ensembleTrain, method = "xgbLinear")
library(tidyverse)
library(caret)
library(doParallel)
library(beepr)
beep(7)
beep(6)
beep(5)
beep(4)
beep(3)
df <- readRDS("harrypotter.rds")
df$character <- NULL
df$TargetHouse <- as.factor(df$TargetHouse)
testData <- df
trainData <- upSample(df %>% select(-TargetHouse), df$TargetHouse)
LogisticRegressionModel <- readRDS("LogisticRegressionModel.rds")
NaiveBayesModel <- readRDS("NaiveBayesModel.rds")
L1Model <- readRDS("L1Model.rds")
L2Model <- readRDS("L2Model.rds")
ElasticNetModel <- readRDS("ElasticNetModel.rds")
MARSModel <- readRDS("MARSModel.rds")
KnnModel <- readRDS("KnnModel.rds")
RandomForestModel <- readRDS("RandomForestModel.rds")
SVMModel <- readRDS("SupportVectorMachineModel.rds")
ensembleTrain <- cbind(predict(LogisticRegressionModel, trainData),
predict(NaiveBayesModel, trainData),
predict(L1Model, trainData),
predict(L2Model,trainData),
predict(ElasticNetModel, trainData),
predict(MARSModel, trainData),
predict(KnnModel, trainData),
predict(RandomForestModel, trainData),
predict(SVMModel, trainData), trainData$Class) %>%
as.data.frame()
colnames(ensembleTrain) <- c("Logistic","NaiveBayes","L1","L2","ElasticNet","MARS","Knn","RandomForest","SVM", "Actual")
ensembleTest <- cbind(predict(LogisticRegressionModel, testData),
predict(NaiveBayesModel, testData),
predict(L1Model, testData),
predict(L2Model,testData),
predict(ElasticNetModel, testData),
predict(MARSModel, testData),
predict(KnnModel, testData),
predict(RandomForestModel, testData),
predict(SVMModel, testData), testData$TargetHouse) %>%
as.data.frame()
colnames(ensembleTest) <- c("Logistic","NaiveBayes","L1","L2","ElasticNet","MARS","Knn","RandomForest","SVM", "Actual")
View(ensembleTest)
ensembleTrain$Actual <- as.factor(ensembleTrain$Actual)
ensembleModel <- train(Actual~., data = ensembleTrain, method = "xgbLinear")
beep(3)
ensembleModel
predict(ensembleModel, ensembleTest)
predict(ensembleModel, ensembleTest) %>% cbind(ensembleTest$Actual)
predict(ensembleModel, ensembleTest) %>% cbind(ensembleTest$Actual) %>% as.data.frame()
predict(ensembleModel, ensembleTest) %>%
cbind(ensembleTest$Actual) %>%
as.data.frame() %>%
rename(., "predicted" = ., "actual" = V2)
predict(ensembleModel, ensembleTest) %>%
cbind(ensembleTest$Actual) %>%
as.data.frame() %>%
rename(., "predicted" = ., "actual" = V2) %>%
mutate(results = if_else(predicted == actual, "correct","wrong"))
source('~/.active-rstudio-document', echo=TRUE)
predict(ensembleModel, ensembleTest) %>%
cbind(ensembleTest$Actual) %>%
as.data.frame() %>%
rename(., "predicted" = ., "actual" = V2) %>%
mutate(results = if_else(predicted == actual, "correct","wrong")) %>%
filter(results == "correct")
predict(ensembleModel, ensembleTest) %>%
cbind(ensembleTest$Actual) %>%
as.data.frame() %>%
rename(., "predicted" = ., "actual" = V2) %>%
mutate(results = if_else(predicted == actual, "correct","wrong")) %>%
filter(results == "correct") %>%
nrow() / nrow(ensembleTrain)
predict(ensembleModel, ensembleTest) %>%
cbind(ensembleTest$Actual) %>%
as.data.frame() %>%
rename(., "predicted" = ., "actual" = V2) %>%
mutate(results = if_else(predicted == actual, "correct","wrong")) %>%
filter(results == "correct") %>%
nrow()
predict(ensembleModel, ensembleTest) %>%
cbind(ensembleTest$Actual) %>%
as.data.frame() %>%
rename(., "predicted" = ., "actual" = V2) %>%
mutate(results = if_else(predicted == actual, "correct","wrong")) %>%
filter(results == "correct") %>%
nrow() / nrow(ensembleTest)
saveRDS(ensembleModel, "EnsembleModel.rds")
install.packages("rtweet")
